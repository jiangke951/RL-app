{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as echarts from 'echarts';\nimport axios from 'axios';\nexport default {\n  name: 'LineChart',\n  mounted() {\n    // 初始化ECharts实例\n    let lineCharts = echarts.init(this.$refs.lineCharts);\n\n    // 使用axios获取CSV数据\n    axios.get('progress.csv').then(response => {\n      // 处理CSV数据\n      let csvData = response.data;\n      let parsedData = this.parseCSVData(csvData);\n\n      // 使用解析后的数据配置ECharts\n      lineCharts.setOption({\n        xAxis: {\n          scale: true\n        },\n        yAxis: {\n          scale: true\n        },\n        series: [{\n          symbolSize: 10,\n          data: parsedData,\n          type: 'scatter'\n        }]\n      });\n    }).catch(error => {\n      console.error('获取CSV数据时出错:', error);\n    });\n  },\n  methods: {\n    parseCSVData(csvData) {\n      // 解析CSV数据并将其转换为所需的格式\n      // 根据CSV的结构实现自己的解析逻辑\n      let parsedData = [];\n      // 示例：按换行符分割CSV行，并按逗号分割列\n      let rows = csvData.split('\\n');\n      rows.forEach(row => {\n        let columns = row.split(',');\n        // 示例：假设前两列是x和y值\n        let x = parseFloat(columns[0]);\n        let y = parseFloat(columns[1]);\n        if (!isNaN(x) && !isNaN(y)) {\n          parsedData.push([x, y]);\n        }\n      });\n      return parsedData;\n    }\n  }\n};","map":{"version":3,"names":["echarts","axios","name","mounted","lineCharts","init","$refs","get","then","response","csvData","data","parsedData","parseCSVData","setOption","xAxis","scale","yAxis","series","symbolSize","type","catch","error","console","methods","rows","split","forEach","row","columns","x","parseFloat","y","isNaN","push"],"sources":["src/views/Index/Home/ScatterMap/index.vue"],"sourcesContent":["<template>\r\n  <div ref=\"lineCharts\" style=\"width: 100%; height: 300px;\"></div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'LineChart',\r\n  mounted() {\r\n    // 初始化ECharts实例\r\n    let lineCharts = echarts.init(this.$refs.lineCharts);\r\n    \r\n   \r\n    // 使用axios获取CSV数据\r\n    axios.get('progress.csv')\r\n      .then(response => {\r\n        // 处理CSV数据\r\n        let csvData = response.data;\r\n        let parsedData = this.parseCSVData(csvData);\r\n\r\n        // 使用解析后的数据配置ECharts\r\n        lineCharts.setOption({\r\n          xAxis: {\r\n            scale: true\r\n          },\r\n          yAxis: {\r\n            scale: true\r\n          },\r\n          series: [\r\n            {\r\n              symbolSize: 10,\r\n              data: parsedData,\r\n              type: 'scatter'\r\n            }\r\n          ]\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.error('获取CSV数据时出错:', error);\r\n      });\r\n  },\r\n  \r\n  methods: {\r\n    parseCSVData(csvData) {\r\n      // 解析CSV数据并将其转换为所需的格式\r\n      // 根据CSV的结构实现自己的解析逻辑\r\n      let parsedData = [];\r\n      // 示例：按换行符分割CSV行，并按逗号分割列\r\n      let rows = csvData.split('\\n');\r\n      rows.forEach(row => {\r\n        let columns = row.split(',');\r\n        // 示例：假设前两列是x和y值\r\n        let x = parseFloat(columns[0]);\r\n        let y = parseFloat(columns[1]);\r\n        if (!isNaN(x) && !isNaN(y)) {\r\n          parsedData.push([x, y]);\r\n        }\r\n      });\r\n\r\n      return parsedData;\r\n    }\r\n  }\r\n};\r\n</script>"],"mappings":";AAKA,YAAAA,OAAA;AACA,OAAAC,KAAA;AAEA;EACAC,IAAA;EACAC,QAAA;IACA;IACA,IAAAC,UAAA,GAAAJ,OAAA,CAAAK,IAAA,MAAAC,KAAA,CAAAF,UAAA;;IAGA;IACAH,KAAA,CAAAM,GAAA,iBACAC,IAAA,CAAAC,QAAA;MACA;MACA,IAAAC,OAAA,GAAAD,QAAA,CAAAE,IAAA;MACA,IAAAC,UAAA,QAAAC,YAAA,CAAAH,OAAA;;MAEA;MACAN,UAAA,CAAAU,SAAA;QACAC,KAAA;UACAC,KAAA;QACA;QACAC,KAAA;UACAD,KAAA;QACA;QACAE,MAAA,GACA;UACAC,UAAA;UACAR,IAAA,EAAAC,UAAA;UACAQ,IAAA;QACA;MAEA;IACA,GACAC,KAAA,CAAAC,KAAA;MACAC,OAAA,CAAAD,KAAA,gBAAAA,KAAA;IACA;EACA;EAEAE,OAAA;IACAX,aAAAH,OAAA;MACA;MACA;MACA,IAAAE,UAAA;MACA;MACA,IAAAa,IAAA,GAAAf,OAAA,CAAAgB,KAAA;MACAD,IAAA,CAAAE,OAAA,CAAAC,GAAA;QACA,IAAAC,OAAA,GAAAD,GAAA,CAAAF,KAAA;QACA;QACA,IAAAI,CAAA,GAAAC,UAAA,CAAAF,OAAA;QACA,IAAAG,CAAA,GAAAD,UAAA,CAAAF,OAAA;QACA,KAAAI,KAAA,CAAAH,CAAA,MAAAG,KAAA,CAAAD,CAAA;UACApB,UAAA,CAAAsB,IAAA,EAAAJ,CAAA,EAAAE,CAAA;QACA;MACA;MAEA,OAAApB,UAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}