{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { test_status_true, test_status_false } from '@/config';\nimport { user_status_true, user_status_false } from '@/config';\nimport { mapGetters } from 'vuex';\nexport default {\n  name: 'TestList',\n  data() {\n    const validataAccount = (rule, value, callback) => {\n      // const reg = /^[0-9]{6,12}$/\n      const reg = /^[\\u4e00-\\u9fa5]{1,7}$|^[\\dA-Za-z_]{1,14}$/;\n      if (value.trim().length <= 0) {\n        callback(new Error('请输入账号'));\n      } else if (!reg.test(value.trim())) {\n        callback(new Error('实验名不能超过7个汉字或者14个字符'));\n      } else {\n        callback();\n      }\n    };\n    const validataUsername = (rule, value, callback) => {\n      //const reg = /^[\\u4e00-\\u9fa5]{2,6}$/\n      if (value.trim().length <= 0) {\n        callback(new Error('请输入用户名'));\n      } else {\n        callback();\n      }\n    };\n    const validataPassword = (rule, value, callback) => {\n      const reg = /^[a-zA-Z0-9_]{8,12}$/;\n      if (value.trim().length <= 0) {\n        callback(new Error('请输入密码'));\n      } else if (!reg.test(value.trim())) {\n        callback(new Error('密码由8到12位的字母、数字或下划线组成'));\n      } else {\n        callback();\n      }\n    };\n    const validataAddUserPassword1 = (rule, value, callback) => {\n      if (this.userAddForm.password.trim() === '') {\n        callback(new Error('请先输入密码'));\n      } else if (value.trim().length <= 0) {\n        callback(new Error('确认密码不得为空'));\n      } else if (value.trim() !== this.userAddForm.password) {\n        callback(new Error('两次输入密码不一致'));\n      } else {\n        callback();\n      }\n    };\n    const validataUpdateUserPassword1 = (rule, value, callback) => {\n      if (this.userUpdateForm.password.trim() === '') {\n        callback(new Error('请先输入密码'));\n      } else if (value.trim().length <= 0) {\n        callback(new Error('确认密码不得为空'));\n      } else if (value.trim() !== this.userUpdateForm.password) {\n        callback(new Error('两次输入密码不一致'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      // 表单验证规则\n      rules: {\n        account: [{\n          required: true,\n          trigger: ['blur', 'change'],\n          validator: validataAccount\n        }],\n        username: [{\n          required: true,\n          trigger: ['blur', 'change'],\n          validator: validataUsername\n        }],\n        password: [{\n          required: true,\n          trigger: ['blur', 'change'],\n          validator: validataPassword\n        }],\n        adduserpwd1: [{\n          required: true,\n          trigger: ['blur', 'change'],\n          validator: validataAddUserPassword1\n        }],\n        updateuserpwd1: [{\n          required: true,\n          trigger: ['blur', 'change'],\n          validator: validataUpdateUserPassword1\n        }],\n        test_status: [{\n          required: true,\n          message: '请选择用户状态',\n          trigger: 'change'\n        }]\n      },\n      user_status: [{\n        label: '全部',\n        value: '0'\n      }, {\n        label: user_status_true,\n        value: '1'\n      }, {\n        label: user_status_false,\n        value: '2'\n      }],\n      test_status: [{\n        label: '全部',\n        value: '0'\n      }, {\n        label: test_status_true,\n        value: '1'\n      }, {\n        label: test_status_false,\n        value: '2'\n      }],\n      // 搜索列表的表单\n      searchForm: {\n        account: '',\n        username: '',\n        user_status: '',\n        create_name: ''\n      },\n      // 当前页\n      page_no: 1,\n      // 初始化每页条目数\n      page_size: 8,\n      // 个数选择器\n      page_sizes: [8, 16, 30, 50, 100],\n      // 添加实验信息的表单\n      testAddDialog: false,\n      // 修改用户信息的表单\n      userUpdateDialog: false,\n      // 修改实验信息的表单\n      testUpdateDialog: false,\n      // 添加实验信息表单\n      testAddForm: {\n        account: '',\n        username: '',\n        create_name: '',\n        test_status: ''\n      },\n      // 实验参数表单\n      testDetailDialog: false,\n      // 实验参数表单\n      testDetailForm: {\n        seed: '',\n        env_id: '',\n        learning_rate: '',\n        input_size: '',\n        info: ''\n      },\n      // 修改用户信息表单\n      userUpdateForm: {\n        user_id: 0,\n        // 用户id\n        account: '',\n        // 账号\n        username: '',\n        // 用户名\n        update_pwd: false,\n        // 是否修改密码\n        password: '',\n        // 密码\n        updateuserpwd1: '',\n        // 确认密码\n        user_status: user_status_true // 用户状态\n      },\n\n      // 修改实验信息表单\n      testUpdateForm: {\n        test_id: 0,\n        //实验id\n        test_name: '',\n        // 实验名\n        user_name: '',\n        // 用户名\n        test_status: '' // 用户状态\n      }\n    };\n  },\n\n  // vuex中mapGetters的使用\n  computed: {\n    ...mapGetters(['user_id', 'userlist', 'testlist', 'user_count', 'test_count', 'userinfo', 'testdetail'])\n  },\n  mounted() {\n    this.searchForm.user_status = this.user_status[0].value;\n    this.searchForm.create_name = this.userinfo.username;\n    this.testAddForm.create_name = this.userinfo.username;\n    // 获取用户列表\n    this.getUserList();\n    //获取实验列表\n    this.getTestList();\n    //获取实验详细列表\n    this.getDetailList();\n  },\n  methods: {\n    // 重置表单\n    resetForm(formname) {\n      this.$refs[formname].resetFields();\n    },\n    //重置修改表单\n    resetForm1(formname) {\n      this.testUpdateForm.test_name = '';\n      this.testUpdateForm.user_name = '';\n      this.testUpdateForm.test_status = '';\n    },\n    // 添加用户信息\n    async addUser(formname) {\n      // console.log(this.$refs[formname])\n\n      await this.$refs[formname].validate(async vaild => {\n        if (vaild) {\n          try {\n            await this.$store.dispatch('addUser', JSON.stringify(this.userAddForm)).then(res => {\n              this.resetForm(formname);\n              this.testAddDialog = false;\n              this.$message({\n                type: 'success',\n                message: res\n              });\n              // 重新获取用户列表\n              this.getUserList();\n            }).catch(err => this.$message({\n              type: 'warning',\n              message: err.message\n            }));\n          } catch (e) {\n            this.$message({\n              type: 'warning',\n              message: e.message\n            });\n          }\n        }\n      });\n    },\n    // 添加实验\n    async addTest(formname) {\n      // console.log(this.$refs[formname])\n      // return\n      await this.$refs[formname].validate(async vaild => {\n        if (vaild) {\n          try {\n            await this.$store.dispatch('addTest', JSON.stringify(this.testAddForm)).then(res => {\n              this.resetForm(formname);\n              this.testAddDialog = false;\n              this.$message({\n                type: 'success',\n                message: res\n              });\n              // 重新获取实验列表\n              this.getTestList();\n            }).catch(err => this.$message({\n              type: 'warning',\n              message: err.message\n            }));\n          } catch (e) {\n            this.$message({\n              type: 'warning',\n              message: e.message\n            });\n          }\n        }\n      });\n    },\n    // 打开修改用户信息的遮罩页\n    openUpdateUser(index, rows) {\n      this.userUpdateDialog = true;\n      const userinfo = rows[index];\n      // 获取当前用户的信息\n      this.userUpdateForm = {\n        user_id: userinfo.user_id,\n        account: userinfo.account,\n        username: userinfo.username,\n        update_pwd: false,\n        password: '',\n        updateuserpwd1: '',\n        user_status: userinfo.user_status\n      };\n      // console.log(userinfo)\n    },\n\n    // 打开修改实验信息的遮罩页\n    openUpdateTest(index, rows) {\n      this.testUpdateDialog = true;\n      const testinfo = rows[index];\n      // 获取当前用户的信息\n      this.testUpdateForm = {\n        test_id: testinfo.test_id,\n        test_name: testinfo.test_name,\n        user_name: testinfo.user_name,\n        test_status: testinfo.test_status\n      };\n    },\n    // 打开实验参数的遮罩页\n    openDetailTest(index, rows) {\n      this.testDetailDialog = true;\n      const testinfo = rows[index];\n      let str = testinfo.hyperparameters;\n      const hyperparameters = JSON.parse(str);\n      // 获取当前实验的信息\n      this.testDetailForm = {\n        test_id: testinfo.test_id,\n        test_name: testinfo.test_name,\n        user_name: testinfo.user_name,\n        test_status: testinfo.test_status,\n        learning_rate: hyperparameters.learning_rate,\n        batch_size: hyperparameters.batch_size,\n        tau: hyperparameters.tau,\n        gamma: hyperparameters.gamma,\n        train_freq: hyperparameters.train_freq,\n        learning_rate: hyperparameters.learning_rate,\n        gradient_steps: hyperparameters.gradient_steps,\n        exploration_fraction: hyperparameters.exploration_fraction,\n        exploration_initial_eps: hyperparameters.exploration_initial_eps,\n        buffer_size: hyperparameters.buffer_size,\n        ent_coef: hyperparameters.ent_coef,\n        vf_coef: hyperparameters.vf_coef,\n        reward: hyperparameters.reward\n      };\n    },\n    // 修改用户信息\n    async updateUser(formname) {\n      await this.$refs[formname].validate(async vaild => {\n        if (vaild) {\n          try {\n            const userinfo = {\n              user_id: this.userUpdateForm.user_id,\n              password: this.userUpdateForm.password,\n              user_status: this.userUpdateForm.user_status\n            };\n            await this.$store.dispatch('backUpdateUserInfo', JSON.stringify(userinfo)).then(res => {\n              this.resetForm(formname);\n              this.userUpdateDialog = false;\n              this.$message({\n                type: 'success',\n                message: res\n              });\n              // 重新获取用户列表\n              this.getUserList();\n            }).catch(err => this.$message({\n              type: 'warning',\n              message: err.message\n            }));\n          } catch (e) {\n            this.$message({\n              type: 'warning',\n              message: e.message\n            });\n          }\n        }\n      });\n    },\n    // 评价实验信息\n    async evaluateTest(formname) {\n      try {\n        const testinfo = {\n          learning_rate: this.testDetailForm.learning_rate,\n          batch_size: this.testDetailForm.batch_size,\n          tau: this.testDetailForm.tau,\n          gamma: this.testDetailForm.gamma,\n          learning_starts: this.testDetailForm.learning_starts,\n          train_freq: this.testDetailForm.train_freq,\n          gradient_steps: this.testDetailForm.gradient_steps,\n          exploration_fraction: this.testDetailForm.exploration_fraction,\n          exploration_initial_eps: this.testDetailForm.exploration_initial_eps,\n          buffer_size: this.testDetailForm.buffer_size,\n          ent_coef: this.testDetailForm.ent_coef,\n          vf_coef: this.testDetailForm.vf_coef\n        };\n        await this.$store.dispatch('evaluateTest', JSON.stringify(testinfo)).then(res => {\n          this.resetForm(formname);\n          this.testUpdateDialog = false;\n          this.$message({\n            type: 'success',\n            message: res\n          });\n          // 重新获取实验列表\n          // this.getTestList()\n        }).catch(err => this.$message({\n          type: 'warning',\n          message: err.message\n        }));\n      } catch (e) {\n        this.$message({\n          type: 'warning',\n          message: e.message\n        });\n      }\n    },\n    // 每页多少条目\n    handleSizeChange(val) {\n      this.page_size = val;\n      this.page_no = 1;\n      this.getUserList();\n    },\n    // 当前第几页\n    handleCurrentChange(val) {\n      this.page_no = val;\n      this.getUserList();\n    },\n    // 获取用户列表\n    async getUserList() {\n      try {\n        const {\n          page_no,\n          page_size\n        } = this;\n        let account = this.searchForm.account;\n        const reg = /^[0-9]{1,12}$/;\n        if (!reg.test(account)) {\n          if (account !== '') {\n            account = '1111111111111111111111111111111111111';\n          }\n        }\n        let username = this.searchForm.username;\n        const name_reg = /^[\\u4e00-\\u9fa50-9a-zA-Z]{1,6}$/;\n        if (!name_reg.test(username)) {\n          if (username !== '') {\n            username = '1111111111111111111111111111111111111';\n          }\n        }\n        let user_status = Number.parseInt(this.searchForm.user_status) || 0;\n        if (user_status === 0) user_status = '全部';else if (user_status === 1) user_status = user_status_true;else if (user_status === 2) user_status = user_status_false;\n        await this.$store.dispatch('getUserList', JSON.stringify({\n          page_no,\n          page_size,\n          account,\n          username,\n          user_status\n        }));\n      } catch (e) {\n        this.$message({\n          type: 'warning',\n          message: e.message\n        });\n      }\n    },\n    // 获取实验列表\n    async getTestList() {\n      // return '111'\n      try {\n        console.log(this.$route.query.parent_id);\n        let parent_id = this.$route.query.parent_id;\n        const {\n          page_no,\n          page_size\n        } = this;\n        let account = this.searchForm.account;\n        const reg = /^[0-9]{1,12}$/;\n        if (!reg.test(account)) {\n          if (account !== '') {\n            account = '1111111111111111111111111111111111111';\n          }\n        }\n        let username = this.searchForm.username;\n        let create_name = this.searchForm.create_name;\n        const name_reg = /^[\\u4e00-\\u9fa50-9a-zA-Z]{1,6}$/;\n        if (!name_reg.test(username)) {\n          if (username !== '') {\n            username = '1111111111111111111111111111111111111';\n          }\n        }\n        let test_status = '正常';\n        await this.$store.dispatch('getTestList', JSON.stringify({\n          page_no,\n          page_size,\n          account,\n          username,\n          test_status,\n          create_name\n        }));\n      } catch (e) {\n        this.$message({\n          type: 'warning',\n          message: e.message\n        });\n      }\n    },\n    // 获取实验详细列表\n    async getDetailList() {\n      try {\n        // console.log(this.$route.query.parent_id)\n        let parent_id = this.$route.query.parent_id;\n        const {\n          page_no,\n          page_size\n        } = this;\n        let account = this.searchForm.account;\n        const reg = /^[0-9]{1,12}$/;\n        if (!reg.test(account)) {\n          if (account !== '') {\n            account = '1111111111111111111111111111111111111';\n          }\n        }\n        let username = this.searchForm.username;\n        let create_name = this.searchForm.create_name;\n        const name_reg = /^[\\u4e00-\\u9fa50-9a-zA-Z]{1,6}$/;\n        if (!name_reg.test(username)) {\n          if (username !== '') {\n            username = '1111111111111111111111111111111111111';\n          }\n        }\n        let test_status = '正常';\n        await this.$store.dispatch('getDetailList', JSON.stringify({\n          page_no,\n          page_size,\n          account,\n          username,\n          test_status,\n          create_name,\n          parent_id\n        }));\n        // await this.$store.dispatch('getTestList', JSON.stringify({ page_no, page_size, account, username, user_status,create_name }))\n\n        // await this.$store.dispatch('getTestDetail', JSON.stringify({ page_no, page_size, account, username, user_status,create_name }))\n      } catch (e) {\n        this.$message({\n          type: 'warning',\n          message: e.message\n        });\n      }\n    },\n    // 重置搜索表单\n    resetSearchForm(formname) {\n      this.resetForm(formname);\n      this.searchForm.user_status = this.user_status[0].value;\n    },\n    // 搜索\n    search() {\n      this.page_no = 1;\n      this.page_size = this.page_sizes[0];\n      this.getTestList();\n    },\n    // 去哪个页面\n    goPath(path, id) {\n      // console.log(id)\n      this.$router.push({\n        path: path,\n        query: {\n          test_detail_id: id\n        }\n      });\n      // this.$router.push({name:this.getFrontPath(path,id),params:{id:id}})\n    },\n\n    // 路由判断\n    getFrontPath(path) {\n      let href = this.$route.path;\n      if (href.includes('front')) {\n        return path;\n      } else {\n        return 'front/' + path;\n      }\n    }\n  }\n};","map":{"version":3,"names":["test_status_true","test_status_false","user_status_true","user_status_false","mapGetters","name","data","validataAccount","rule","value","callback","reg","trim","length","Error","test","validataUsername","validataPassword","validataAddUserPassword1","userAddForm","password","validataUpdateUserPassword1","userUpdateForm","rules","account","required","trigger","validator","username","adduserpwd1","updateuserpwd1","test_status","message","user_status","label","searchForm","create_name","page_no","page_size","page_sizes","testAddDialog","userUpdateDialog","testUpdateDialog","testAddForm","testDetailDialog","testDetailForm","seed","env_id","learning_rate","input_size","info","user_id","update_pwd","testUpdateForm","test_id","test_name","user_name","computed","mounted","userinfo","getUserList","getTestList","getDetailList","methods","resetForm","formname","$refs","resetFields","resetForm1","addUser","validate","vaild","$store","dispatch","JSON","stringify","then","res","$message","type","catch","err","e","addTest","openUpdateUser","index","rows","openUpdateTest","testinfo","openDetailTest","str","hyperparameters","parse","batch_size","tau","gamma","train_freq","gradient_steps","exploration_fraction","exploration_initial_eps","buffer_size","ent_coef","vf_coef","reward","updateUser","evaluateTest","learning_starts","handleSizeChange","val","handleCurrentChange","name_reg","Number","parseInt","console","log","$route","query","parent_id","resetSearchForm","search","goPath","path","id","$router","push","test_detail_id","getFrontPath","href","includes"],"sources":["src/views/Index/Front/TestDetail/index.vue"],"sourcesContent":["<template>\r\n    <div class=\"test-list maxWH clearfix\">\r\n       \r\n       \r\n       \r\n        <!-- 列表显示实验 -->\r\n        <el-table :data=\"testdetail\" border style=\"width: 100%\" max-height=\"250\">\r\n           \r\n            <el-table-column prop=\"test_name\" label=\"实验名\" show-overflow-tooltip>\r\n                \r\n            </el-table-column>\r\n            <el-table-column prop=\"test_id\" label=\"实验id\" show-overflow-tooltip>\r\n                \r\n            </el-table-column>\r\n            <el-table-column prop=\"user_name\" label=\"实验者\">\r\n            </el-table-column>\r\n            \r\n            <el-table-column prop=\"create_time\" label=\"创建时间\" show-overflow-tooltip>\r\n            </el-table-column>\r\n            <el-table-column label=\"操作\" prop=\"test_id\" header-align=\"center\">\r\n                <template slot-scope=\"scope\">\r\n                    <div class=\"handler flex-center\">\r\n                         <el-button type=\"warning\" @click.native.prevent.stop=\"goPath('reserveinfo',scope.row.test_id)\">\r\n                            查看实验\r\n                        </el-button> \r\n                        <el-button type=\"warning\" @click.native.prevent.stop=\"openDetailTest(scope.$index, testdetail)\">\r\n                            实验参数\r\n                        </el-button>\r\n                       \r\n                    </div>\r\n                </template>\r\n            </el-table-column>\r\n          \r\n        </el-table>\r\n        <!-- 分页器 -->\r\n        <el-pagination @size-change=\"handleSizeChange\" @current-change=\"handleCurrentChange\" :current-page=\"page_no\"\r\n            :page-sizes=\"page_sizes\" :page-size=\"page_size\" layout=\"total, sizes, prev, pager, next, jumper\"\r\n            :total=\"test_count\" style=\"padding: 10px 0;\">\r\n        </el-pagination>\r\n        <!-- dialog -->\r\n       \r\n       \r\n        \r\n       \r\n\r\n         <!-- 实验参数展示 -->\r\n         <el-dialog title=\"超参数\" :visible.sync=\"testDetailDialog\">\r\n            <el-form ref=\"testDetailForm\" :model=\"testDetailForm\" label-width=\"110px\" :rules=\"rules\"\r\n                hide-required-asterisk>\r\n                <el-row>  \r\n                    <el-col :span=\"8\"> <!-- 这里设置 span 为 8，表示占据三分之一的空间 ，使用的是 24 列的栅格系统-->  \r\n                        <el-form-item label=\"learning_rate\"  prop=\"learning_rate\" >\r\n                            <el-input :style=\"{ width: '80px' }\" disabled v-model.trim=\"testDetailForm.learning_rate\"></el-input>\r\n                        </el-form-item>\r\n                    </el-col>  \r\n                     \r\n                    <el-col :span=\"8\"> \r\n                        <el-form-item label=\"batch_size\"  prop=\"batch_size\" >\r\n                            <el-input :style=\"{ width: '80px' }\" disabled v-model.trim=\"testDetailForm.batch_size\"></el-input>\r\n                        </el-form-item>\r\n                    </el-col>\r\n                     \r\n                    <el-col :span=\"8\"> \r\n                        <el-form-item label=\"tau\"  prop=\"tau\" >\r\n                            <el-input :style=\"{ width: '80px' }\" disabled v-model.trim=\"testDetailForm.tau\"></el-input>\r\n                        </el-form-item>\r\n                    </el-col> \r\n                </el-row> \r\n                 \r\n        \r\n                <el-row>  \r\n                    <el-col :span=\"8\"> <!-- 这里设置 span 为 8，表示占据三分之一的空间 ，使用的是 24 列的栅格系统-->  \r\n                        <el-form-item label=\"gamma\"  prop=\"gamma\" >\r\n                            <el-input :style=\"{ width: '80px' }\" disabled v-model.trim=\"testDetailForm.gamma\"></el-input>\r\n                        </el-form-item>\r\n                    </el-col>  \r\n                     \r\n                    <el-col :span=\"8\"> \r\n                        <el-form-item label=\"learning_starts\"  prop=\"learning_starts\" >\r\n                            <el-input :style=\"{ width: '80px' }\" disabled v-model.trim=\"testDetailForm.seed\"></el-input>\r\n                        </el-form-item>\r\n                    </el-col>  \r\n                     \r\n                    <el-col :span=\"8\"> \r\n                        <el-form-item label=\"train_freq\"  prop=\"train_freq\" >\r\n                            <el-input :style=\"{ width: '80px' }\" disabled v-model.trim=\"testDetailForm.train_freq\"></el-input>\r\n                        </el-form-item>\r\n                    </el-col> \r\n                </el-row> \r\n\r\n\r\n                <el-row>  \r\n                    <el-col :span=\"8\"> <!-- 这里设置 span 为 8，表示占据三分之一的空间 ，使用的是 24 列的栅格系统-->  \r\n                        <el-form-item label=\"gradient_steps\"  prop=\"gradient_steps\" >\r\n                            <el-input :style=\"{ width: '80px' }\" disabled v-model.trim=\"testDetailForm.gradient_steps\"></el-input>\r\n                        </el-form-item>\r\n                    </el-col>  \r\n                     \r\n                    <el-col :span=\"8\"> \r\n                        <el-form-item label=\"exploration_fraction\"  prop=\"exploration_fraction\" >\r\n                            <el-input :style=\"{ width: '80px' }\" disabled v-model.trim=\"testDetailForm.exploration_fraction\"></el-input>\r\n                        </el-form-item>\r\n                    </el-col>  \r\n                     \r\n                    <el-col :span=\"8\"> \r\n                        <el-form-item label=\"exploration_initial_eps\"  prop=\"exploration_initial_eps\" >\r\n                            <el-input :style=\"{ width: '80px' }\" disabled v-model.trim=\"testDetailForm.exploration_initial_eps\"></el-input>\r\n                        </el-form-item>\r\n                    </el-col> \r\n                </el-row> \r\n\r\n\r\n                <el-row>  \r\n                    <el-col :span=\"8\"> <!-- 这里设置 span 为 8，表示占据三分之一的空间 ，使用的是 24 列的栅格系统-->  \r\n                        <el-form-item label=\"buffer_size\"  prop=\"buffer_size\" >\r\n                            <el-input :style=\"{ width: '80px' }\" disabled v-model.trim=\"testDetailForm.buffer_size\"></el-input>\r\n                        </el-form-item>\r\n                    </el-col>  \r\n                     \r\n                    <el-col :span=\"8\"> \r\n                        <el-form-item label=\"ent_coef\"  prop=\"ent_coef\" >\r\n                            <el-input :style=\"{ width: '80px' }\" disabled v-model.trim=\"testDetailForm.ent_coef\"></el-input>\r\n                        </el-form-item>\r\n                    </el-col>  \r\n                     \r\n                    <el-col :span=\"8\"> \r\n                        <el-form-item label=\"vf_coef\"  prop=\"vf_coef\" >\r\n                            <el-input :style=\"{ width: '80px' }\" disabled v-model.trim=\"testDetailForm.vf_coef\"></el-input>\r\n                        </el-form-item>\r\n                    </el-col> \r\n                </el-row> \r\n\r\n                \r\n            </el-form>\r\n            <div slot=\"footer\" class=\"dialog-footer\" >\r\n                <el-button type=\"primary\" @click.native.prevent.stop=\"evaluateTest('testDetailForm')\">参数优化</el-button>\r\n                <!-- <el-button type=\"primary\" @click.native.prevent.stop=\"updateTest('testUpdateForm')\">确 定</el-button> -->\r\n            </div>\r\n            <!-- <div class=\"el-dialog__title\">mean reward:-1303.4206398</div>  -->\r\n            <div class=\"el-dialog__title\">mean reward:{{testDetailForm.reward}}</div> \r\n        </el-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { test_status_true, test_status_false } from '@/config'\r\nimport { user_status_true, user_status_false } from '@/config'\r\nimport { mapGetters } from 'vuex'\r\nexport default {\r\n    name: 'TestList',\r\n    data() {\r\n        const validataAccount = (rule, value, callback) => {\r\n            // const reg = /^[0-9]{6,12}$/\r\n            const reg =/^[\\u4e00-\\u9fa5]{1,7}$|^[\\dA-Za-z_]{1,14}$/\r\n            if (value.trim().length <= 0) {\r\n                callback(new Error('请输入账号'))\r\n            } else if (!reg.test(value.trim())) {\r\n                callback(new Error('实验名不能超过7个汉字或者14个字符'))\r\n            } else {\r\n                callback()\r\n            }\r\n        }\r\n        const validataUsername = (rule, value, callback) => {\r\n            //const reg = /^[\\u4e00-\\u9fa5]{2,6}$/\r\n            if (value.trim().length <= 0) {\r\n                callback(new Error('请输入用户名'))\r\n            } else {\r\n                callback()\r\n            }\r\n        }\r\n        const validataPassword = (rule, value, callback) => {\r\n            const reg = /^[a-zA-Z0-9_]{8,12}$/\r\n            if (value.trim().length <= 0) {\r\n                callback(new Error('请输入密码'))\r\n            } else if (!reg.test(value.trim())) {\r\n                callback(new Error('密码由8到12位的字母、数字或下划线组成'))\r\n            } else {\r\n                callback()\r\n            }\r\n        }\r\n        const validataAddUserPassword1 = (rule, value, callback) => {\r\n            if (this.userAddForm.password.trim() === '') {\r\n                callback(new Error('请先输入密码'))\r\n            } else if (value.trim().length <= 0) {\r\n                callback(new Error('确认密码不得为空'))\r\n            } else if (value.trim() !== this.userAddForm.password) {\r\n                callback(new Error('两次输入密码不一致'))\r\n            } else {\r\n                callback()\r\n            }\r\n        }\r\n        const validataUpdateUserPassword1 = (rule, value, callback) => {\r\n            if (this.userUpdateForm.password.trim() === '') {\r\n                callback(new Error('请先输入密码'))\r\n            } else if (value.trim().length <= 0) {\r\n                callback(new Error('确认密码不得为空'))\r\n            } else if (value.trim() !== this.userUpdateForm.password) {\r\n                callback(new Error('两次输入密码不一致'))\r\n            } else {\r\n                callback()\r\n            }\r\n        }\r\n        return {\r\n            // 表单验证规则\r\n            rules: {\r\n                account: [{ required: true, trigger: ['blur', 'change'], validator: validataAccount }],\r\n                username: [{ required: true, trigger: ['blur', 'change'], validator: validataUsername }],\r\n                password: [{ required: true, trigger: ['blur', 'change'], validator: validataPassword }],\r\n                adduserpwd1: [{ required: true, trigger: ['blur', 'change'], validator: validataAddUserPassword1 }],\r\n                updateuserpwd1: [{ required: true, trigger: ['blur', 'change'], validator: validataUpdateUserPassword1 }],\r\n                test_status: [{ required: true, message: '请选择用户状态', trigger: 'change' }],\r\n            },\r\n            user_status: [\r\n                { label: '全部', value: '0' },\r\n                { label: user_status_true, value: '1' },\r\n                { label: user_status_false, value: '2' },\r\n            ],\r\n            test_status: [\r\n                { label: '全部', value: '0' },\r\n                { label: test_status_true, value: '1' },\r\n                { label: test_status_false, value: '2' },\r\n            ],\r\n            // 搜索列表的表单\r\n            searchForm: {\r\n                account: '',\r\n                username: '',\r\n                user_status: '',\r\n                create_name:'',\r\n            },\r\n            // 当前页\r\n            page_no: 1,\r\n            // 初始化每页条目数\r\n            page_size: 8,\r\n            // 个数选择器\r\n            page_sizes: [8, 16, 30, 50, 100],\r\n            // 添加实验信息的表单\r\n            testAddDialog: false,\r\n            // 修改用户信息的表单\r\n            userUpdateDialog: false,\r\n            // 修改实验信息的表单\r\n            testUpdateDialog:false,\r\n            // 添加实验信息表单\r\n            testAddForm: {\r\n                account: '',\r\n                username: '',\r\n                create_name:'',\r\n                test_status:''\r\n            },\r\n             // 实验参数表单\r\n            testDetailDialog:false,\r\n            // 实验参数表单\r\n            testDetailForm: {\r\n                seed: '',\r\n                env_id: '',\r\n                learning_rate:'',\r\n                input_size:'',\r\n                info:'',\r\n            },\r\n            // 修改用户信息表单\r\n            userUpdateForm: {\r\n                user_id: 0, // 用户id\r\n                account: '', // 账号\r\n                username: '', // 用户名\r\n                update_pwd: false, // 是否修改密码\r\n                password: '', // 密码\r\n                updateuserpwd1: '', // 确认密码\r\n                user_status: user_status_true, // 用户状态\r\n            },\r\n             // 修改实验信息表单\r\n             testUpdateForm: {\r\n                test_id:0,    //实验id\r\n                test_name: '', // 实验名\r\n                user_name: '', // 用户名\r\n                test_status: '', // 用户状态\r\n            },\r\n        }\r\n    },\r\n    \r\n    // vuex中mapGetters的使用\r\n    computed: {\r\n        ...mapGetters(['user_id', 'userlist','testlist', 'user_count','test_count','userinfo','testdetail'])\r\n    },\r\n    mounted() {\r\n        this.searchForm.user_status = this.user_status[0].value\r\n        this.searchForm.create_name = this.userinfo.username\r\n        this.testAddForm.create_name = this.userinfo.username\r\n        // 获取用户列表\r\n        this.getUserList()\r\n        //获取实验列表\r\n        this.getTestList()\r\n        //获取实验详细列表\r\n        this.getDetailList()\r\n    },\r\n    methods: {\r\n        // 重置表单\r\n        resetForm(formname) {\r\n           \r\n            \r\n            this.$refs[formname].resetFields()\r\n        },\r\n        //重置修改表单\r\n        resetForm1(formname) {\r\n            this.testUpdateForm.test_name=''\r\n            this.testUpdateForm.user_name=''\r\n            this.testUpdateForm.test_status=''\r\n            \r\n\r\n       },\r\n        // 添加用户信息\r\n        async addUser(formname) {\r\n            // console.log(this.$refs[formname])\r\n            \r\n            await this.$refs[formname].validate(async vaild => {\r\n                if (vaild) {\r\n                    \r\n                   \r\n                    try {\r\n                        await this.$store.dispatch('addUser', JSON.stringify(this.userAddForm))\r\n                            .then(res => {\r\n                                this.resetForm(formname)\r\n                                this.testAddDialog = false\r\n                                this.$message({ type: 'success', message: res })\r\n                                // 重新获取用户列表\r\n                                this.getUserList()\r\n                            }).catch(err => this.$message({ type: 'warning', message: err.message }))\r\n                    } catch (e) {\r\n                        this.$message({ type: 'warning', message: e.message })\r\n                    }\r\n                }\r\n            })\r\n        },\r\n         // 添加实验\r\n         async addTest(formname) {\r\n            // console.log(this.$refs[formname])\r\n            // return\r\n            await this.$refs[formname].validate(async vaild => {\r\n                if (vaild) { \r\n                    try {\r\n                        await this.$store.dispatch('addTest', JSON.stringify(this.testAddForm))\r\n                            .then(res => {\r\n                                this.resetForm(formname)\r\n                                this.testAddDialog = false\r\n                                this.$message({ type: 'success', message: res })\r\n                                // 重新获取实验列表\r\n                                this.getTestList()\r\n                            }).catch(err => this.$message({ type: 'warning', message: err.message }))\r\n                    } catch (e) {\r\n                        this.$message({ type: 'warning', message: e.message })\r\n                    }\r\n                }\r\n            })\r\n        },\r\n        // 打开修改用户信息的遮罩页\r\n        openUpdateUser(index, rows) {\r\n            this.userUpdateDialog = true\r\n            const userinfo = rows[index]\r\n            // 获取当前用户的信息\r\n            this.userUpdateForm = {\r\n                user_id: userinfo.user_id,\r\n                account: userinfo.account,\r\n                username: userinfo.username,\r\n                update_pwd: false,\r\n                password: '',\r\n                updateuserpwd1: '',\r\n                user_status: userinfo.user_status,\r\n            }\r\n            // console.log(userinfo)\r\n        },\r\n          // 打开修改实验信息的遮罩页\r\n          openUpdateTest(index, rows) {\r\n            this.testUpdateDialog = true\r\n            const testinfo = rows[index]\r\n            // 获取当前用户的信息\r\n            this.testUpdateForm = {\r\n                test_id:testinfo.test_id,\r\n                test_name: testinfo.test_name,\r\n                user_name: testinfo.user_name,\r\n               \r\n                test_status: testinfo.test_status,\r\n            }\r\n           \r\n        },\r\n         // 打开实验参数的遮罩页\r\n         openDetailTest(index, rows) {\r\n            this.testDetailDialog = true\r\n            const testinfo = rows[index]\r\n            let str = testinfo.hyperparameters;\r\n            const hyperparameters = JSON.parse(str);\r\n            // 获取当前实验的信息\r\n            this.testDetailForm = {\r\n                test_id:testinfo.test_id,\r\n                test_name: testinfo.test_name,\r\n                user_name: testinfo.user_name,              \r\n                test_status: testinfo.test_status,\r\n                learning_rate: hyperparameters.learning_rate,\r\n                batch_size: hyperparameters.batch_size,\r\n                tau: hyperparameters.tau,\r\n                gamma: hyperparameters.gamma,\r\n                train_freq: hyperparameters.train_freq,\r\n                learning_rate: hyperparameters.learning_rate,\r\n                gradient_steps: hyperparameters.gradient_steps,\r\n                exploration_fraction: hyperparameters.exploration_fraction,\r\n                exploration_initial_eps: hyperparameters.exploration_initial_eps,\r\n                buffer_size: hyperparameters.buffer_size,\r\n                ent_coef: hyperparameters.ent_coef,\r\n                vf_coef: hyperparameters.vf_coef,\r\n                reward: hyperparameters.reward,\r\n            }\r\n        \r\n           \r\n        },\r\n        // 修改用户信息\r\n        async updateUser(formname) {\r\n            await this.$refs[formname].validate(async vaild => {\r\n                if (vaild) {\r\n                    try {\r\n                        const userinfo = {\r\n                            user_id: this.userUpdateForm.user_id,\r\n                            password: this.userUpdateForm.password,\r\n                            user_status: this.userUpdateForm.user_status\r\n                        }\r\n                        await this.$store.dispatch('backUpdateUserInfo', JSON.stringify(userinfo))\r\n                            .then(res => {\r\n                                this.resetForm(formname)\r\n                                this.userUpdateDialog = false\r\n                                this.$message({ type: 'success', message: res })\r\n                                // 重新获取用户列表\r\n                                this.getUserList()\r\n                            }).catch(err => this.$message({ type: 'warning', message: err.message }))\r\n                    } catch (e) {\r\n                        this.$message({ type: 'warning', message: e.message })\r\n                    }\r\n                }\r\n            })\r\n        },\r\n         // 评价实验信息\r\n         async evaluateTest(formname) {\r\n            try {\r\n                        const testinfo = {\r\n                            learning_rate: this.testDetailForm.learning_rate,\r\n                            batch_size: this.testDetailForm.batch_size,\r\n                            tau: this.testDetailForm.tau,\r\n                            gamma: this.testDetailForm.gamma,\r\n                            learning_starts: this.testDetailForm.learning_starts,\r\n                            train_freq: this.testDetailForm.train_freq,\r\n                            gradient_steps: this.testDetailForm.gradient_steps,\r\n                            exploration_fraction: this.testDetailForm.exploration_fraction,\r\n                            exploration_initial_eps: this.testDetailForm.exploration_initial_eps,\r\n                            buffer_size: this.testDetailForm.buffer_size,\r\n                            ent_coef: this.testDetailForm.ent_coef,\r\n                            vf_coef: this.testDetailForm.vf_coef,\r\n                        }\r\n                        \r\n                        await this.$store.dispatch('evaluateTest', JSON.stringify(testinfo))\r\n                            .then(res => {\r\n                                this.resetForm(formname)\r\n                                this.testUpdateDialog = false\r\n                                this.$message({ type: 'success', message: res })\r\n                                // 重新获取实验列表\r\n                                // this.getTestList()\r\n                            }).catch(err => this.$message({ type: 'warning', message: err.message }))\r\n                    } catch (e) {\r\n                        this.$message({ type: 'warning', message: e.message })\r\n                    }\r\n        },\r\n       \r\n        // 每页多少条目\r\n        handleSizeChange(val) {\r\n            this.page_size = val\r\n            this.page_no = 1\r\n            this.getUserList()\r\n        },\r\n        // 当前第几页\r\n        handleCurrentChange(val) {\r\n            this.page_no = val\r\n            this.getUserList()\r\n        },\r\n        // 获取用户列表\r\n        async getUserList() {\r\n            try {\r\n                const { page_no, page_size } = this\r\n                let account = this.searchForm.account\r\n                const reg = /^[0-9]{1,12}$/\r\n                if (!reg.test(account)) {\r\n                    if (account !== '') {\r\n                        account = '1111111111111111111111111111111111111'\r\n                    }\r\n                }\r\n                let username = this.searchForm.username\r\n                const name_reg = /^[\\u4e00-\\u9fa50-9a-zA-Z]{1,6}$/\r\n                if (!name_reg.test(username)) {\r\n                    if (username !== '') {\r\n                        username = '1111111111111111111111111111111111111'\r\n                    }\r\n                }\r\n                let user_status = Number.parseInt(this.searchForm.user_status) || 0\r\n                if (user_status === 0) user_status = '全部'\r\n                else if (user_status === 1) user_status = user_status_true\r\n                else if (user_status === 2) user_status = user_status_false\r\n                await this.$store.dispatch('getUserList', JSON.stringify({ page_no, page_size, account, username, user_status }))\r\n            } catch (e) {\r\n                this.$message({ type: 'warning', message: e.message })\r\n            }\r\n        },\r\n         // 获取实验列表\r\n         async getTestList() {\r\n            // return '111'\r\n            try {\r\n                console.log(this.$route.query.parent_id)\r\n                let parent_id = this.$route.query.parent_id\r\n                const { page_no, page_size } = this\r\n                let account = this.searchForm.account\r\n            \r\n                const reg = /^[0-9]{1,12}$/\r\n                if (!reg.test(account)) {\r\n                    if (account !== '') {\r\n                        account = '1111111111111111111111111111111111111'\r\n                    }\r\n                }\r\n                let username = this.searchForm.username\r\n                let create_name = this.searchForm.create_name\r\n                const name_reg = /^[\\u4e00-\\u9fa50-9a-zA-Z]{1,6}$/\r\n                if (!name_reg.test(username)) {\r\n                    if (username !== '') {\r\n                        username = '1111111111111111111111111111111111111'\r\n                    }\r\n                }\r\n                let test_status = '正常'\r\n                await this.$store.dispatch('getTestList', JSON.stringify({ page_no, page_size, account, username, test_status,create_name }))\r\n            } catch (e) {\r\n                this.$message({ type: 'warning', message: e.message })\r\n            }\r\n        },\r\n         // 获取实验详细列表\r\n         async getDetailList() {\r\n            \r\n            try {\r\n                \r\n                // console.log(this.$route.query.parent_id)\r\n                let parent_id = this.$route.query.parent_id\r\n                const { page_no, page_size } = this\r\n                let account = this.searchForm.account\r\n            \r\n                const reg = /^[0-9]{1,12}$/\r\n                if (!reg.test(account)) {\r\n                    if (account !== '') {\r\n                        account = '1111111111111111111111111111111111111'\r\n                    }\r\n                }\r\n                let username = this.searchForm.username\r\n                let create_name = this.searchForm.create_name\r\n                const name_reg = /^[\\u4e00-\\u9fa50-9a-zA-Z]{1,6}$/\r\n                if (!name_reg.test(username)) {\r\n                    if (username !== '') {\r\n                        username = '1111111111111111111111111111111111111'\r\n                    }\r\n                }\r\n               \r\n                let test_status = '正常'\r\n                await this.$store.dispatch('getDetailList', JSON.stringify({ page_no, page_size, account, username, test_status,create_name,parent_id}))\r\n                // await this.$store.dispatch('getTestList', JSON.stringify({ page_no, page_size, account, username, user_status,create_name }))\r\n                \r\n                // await this.$store.dispatch('getTestDetail', JSON.stringify({ page_no, page_size, account, username, user_status,create_name }))\r\n\r\n            } catch (e) {\r\n                this.$message({ type: 'warning', message: e.message })\r\n            }\r\n        },\r\n        // 重置搜索表单\r\n        resetSearchForm(formname) {\r\n            this.resetForm(formname)\r\n            this.searchForm.user_status = this.user_status[0].value\r\n        },\r\n        // 搜索\r\n        search() {\r\n            this.page_no = 1\r\n            this.page_size = this.page_sizes[0]\r\n            this.getTestList()\r\n        },\r\n    \r\n          // 去哪个页面\r\n          goPath(path,id) {\r\n            // console.log(id)\r\n            this.$router.push({path:path,query:{test_detail_id:id}});\r\n            // this.$router.push({name:this.getFrontPath(path,id),params:{id:id}})\r\n\r\n        },\r\n        // 路由判断\r\n        getFrontPath(path) {\r\n            let href = this.$route.path\r\n            if (href.includes('front')) {\r\n                return path\r\n            } else {\r\n                return 'front/' + path\r\n            }\r\n        },\r\n    },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.test-list {\r\n    padding:20px 5%;\r\n    .search {\r\n        width: 100%;\r\n        height: 80px;\r\n        \r\n        box-sizing: border-box;\r\n        border: 1px solid rgb(220, 220, 220);\r\n        padding-top: 15px;\r\n        overflow: hidden;\r\n\r\n        .search-form {\r\n            min-width: 400px;\r\n            justify-content: center;\r\n        }\r\n    }\r\n}\r\n.short-input {  \r\n  width: 150px; /* 或者其他你想要的宽度 */  \r\n} \r\n</style>"],"mappings":";AAiJA,SAAAA,gBAAA,EAAAC,iBAAA;AACA,SAAAC,gBAAA,EAAAC,iBAAA;AACA,SAAAC,UAAA;AACA;EACAC,IAAA;EACAC,KAAA;IACA,MAAAC,eAAA,GAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA;MACA,MAAAC,GAAA;MACA,IAAAF,KAAA,CAAAG,IAAA,GAAAC,MAAA;QACAH,QAAA,KAAAI,KAAA;MACA,YAAAH,GAAA,CAAAI,IAAA,CAAAN,KAAA,CAAAG,IAAA;QACAF,QAAA,KAAAI,KAAA;MACA;QACAJ,QAAA;MACA;IACA;IACA,MAAAM,gBAAA,GAAAA,CAAAR,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA;MACA,IAAAD,KAAA,CAAAG,IAAA,GAAAC,MAAA;QACAH,QAAA,KAAAI,KAAA;MACA;QACAJ,QAAA;MACA;IACA;IACA,MAAAO,gBAAA,GAAAA,CAAAT,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,MAAAC,GAAA;MACA,IAAAF,KAAA,CAAAG,IAAA,GAAAC,MAAA;QACAH,QAAA,KAAAI,KAAA;MACA,YAAAH,GAAA,CAAAI,IAAA,CAAAN,KAAA,CAAAG,IAAA;QACAF,QAAA,KAAAI,KAAA;MACA;QACAJ,QAAA;MACA;IACA;IACA,MAAAQ,wBAAA,GAAAA,CAAAV,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,SAAAS,WAAA,CAAAC,QAAA,CAAAR,IAAA;QACAF,QAAA,KAAAI,KAAA;MACA,WAAAL,KAAA,CAAAG,IAAA,GAAAC,MAAA;QACAH,QAAA,KAAAI,KAAA;MACA,WAAAL,KAAA,CAAAG,IAAA,YAAAO,WAAA,CAAAC,QAAA;QACAV,QAAA,KAAAI,KAAA;MACA;QACAJ,QAAA;MACA;IACA;IACA,MAAAW,2BAAA,GAAAA,CAAAb,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,SAAAY,cAAA,CAAAF,QAAA,CAAAR,IAAA;QACAF,QAAA,KAAAI,KAAA;MACA,WAAAL,KAAA,CAAAG,IAAA,GAAAC,MAAA;QACAH,QAAA,KAAAI,KAAA;MACA,WAAAL,KAAA,CAAAG,IAAA,YAAAU,cAAA,CAAAF,QAAA;QACAV,QAAA,KAAAI,KAAA;MACA;QACAJ,QAAA;MACA;IACA;IACA;MACA;MACAa,KAAA;QACAC,OAAA;UAAAC,QAAA;UAAAC,OAAA;UAAAC,SAAA,EAAApB;QAAA;QACAqB,QAAA;UAAAH,QAAA;UAAAC,OAAA;UAAAC,SAAA,EAAAX;QAAA;QACAI,QAAA;UAAAK,QAAA;UAAAC,OAAA;UAAAC,SAAA,EAAAV;QAAA;QACAY,WAAA;UAAAJ,QAAA;UAAAC,OAAA;UAAAC,SAAA,EAAAT;QAAA;QACAY,cAAA;UAAAL,QAAA;UAAAC,OAAA;UAAAC,SAAA,EAAAN;QAAA;QACAU,WAAA;UAAAN,QAAA;UAAAO,OAAA;UAAAN,OAAA;QAAA;MACA;MACAO,WAAA,GACA;QAAAC,KAAA;QAAAzB,KAAA;MAAA,GACA;QAAAyB,KAAA,EAAAhC,gBAAA;QAAAO,KAAA;MAAA,GACA;QAAAyB,KAAA,EAAA/B,iBAAA;QAAAM,KAAA;MAAA,EACA;MACAsB,WAAA,GACA;QAAAG,KAAA;QAAAzB,KAAA;MAAA,GACA;QAAAyB,KAAA,EAAAlC,gBAAA;QAAAS,KAAA;MAAA,GACA;QAAAyB,KAAA,EAAAjC,iBAAA;QAAAQ,KAAA;MAAA,EACA;MACA;MACA0B,UAAA;QACAX,OAAA;QACAI,QAAA;QACAK,WAAA;QACAG,WAAA;MACA;MACA;MACAC,OAAA;MACA;MACAC,SAAA;MACA;MACAC,UAAA;MACA;MACAC,aAAA;MACA;MACAC,gBAAA;MACA;MACAC,gBAAA;MACA;MACAC,WAAA;QACAnB,OAAA;QACAI,QAAA;QACAQ,WAAA;QACAL,WAAA;MACA;MACA;MACAa,gBAAA;MACA;MACAC,cAAA;QACAC,IAAA;QACAC,MAAA;QACAC,aAAA;QACAC,UAAA;QACAC,IAAA;MACA;MACA;MACA5B,cAAA;QACA6B,OAAA;QAAA;QACA3B,OAAA;QAAA;QACAI,QAAA;QAAA;QACAwB,UAAA;QAAA;QACAhC,QAAA;QAAA;QACAU,cAAA;QAAA;QACAG,WAAA,EAAA/B,gBAAA;MACA;;MACA;MACAmD,cAAA;QACAC,OAAA;QAAA;QACAC,SAAA;QAAA;QACAC,SAAA;QAAA;QACAzB,WAAA;MACA;IACA;EACA;;EAEA;EACA0B,QAAA;IACA,GAAArD,UAAA;EACA;EACAsD,QAAA;IACA,KAAAvB,UAAA,CAAAF,WAAA,QAAAA,WAAA,IAAAxB,KAAA;IACA,KAAA0B,UAAA,CAAAC,WAAA,QAAAuB,QAAA,CAAA/B,QAAA;IACA,KAAAe,WAAA,CAAAP,WAAA,QAAAuB,QAAA,CAAA/B,QAAA;IACA;IACA,KAAAgC,WAAA;IACA;IACA,KAAAC,WAAA;IACA;IACA,KAAAC,aAAA;EACA;EACAC,OAAA;IACA;IACAC,UAAAC,QAAA;MAGA,KAAAC,KAAA,CAAAD,QAAA,EAAAE,WAAA;IACA;IACA;IACAC,WAAAH,QAAA;MACA,KAAAZ,cAAA,CAAAE,SAAA;MACA,KAAAF,cAAA,CAAAG,SAAA;MACA,KAAAH,cAAA,CAAAtB,WAAA;IAGA;IACA;IACA,MAAAsC,QAAAJ,QAAA;MACA;;MAEA,WAAAC,KAAA,CAAAD,QAAA,EAAAK,QAAA,OAAAC,KAAA;QACA,IAAAA,KAAA;UAGA;YACA,WAAAC,MAAA,CAAAC,QAAA,YAAAC,IAAA,CAAAC,SAAA,MAAAxD,WAAA,GACAyD,IAAA,CAAAC,GAAA;cACA,KAAAb,SAAA,CAAAC,QAAA;cACA,KAAAzB,aAAA;cACA,KAAAsC,QAAA;gBAAAC,IAAA;gBAAA/C,OAAA,EAAA6C;cAAA;cACA;cACA,KAAAjB,WAAA;YACA,GAAAoB,KAAA,CAAAC,GAAA,SAAAH,QAAA;cAAAC,IAAA;cAAA/C,OAAA,EAAAiD,GAAA,CAAAjD;YAAA;UACA,SAAAkD,CAAA;YACA,KAAAJ,QAAA;cAAAC,IAAA;cAAA/C,OAAA,EAAAkD,CAAA,CAAAlD;YAAA;UACA;QACA;MACA;IACA;IACA;IACA,MAAAmD,QAAAlB,QAAA;MACA;MACA;MACA,WAAAC,KAAA,CAAAD,QAAA,EAAAK,QAAA,OAAAC,KAAA;QACA,IAAAA,KAAA;UACA;YACA,WAAAC,MAAA,CAAAC,QAAA,YAAAC,IAAA,CAAAC,SAAA,MAAAhC,WAAA,GACAiC,IAAA,CAAAC,GAAA;cACA,KAAAb,SAAA,CAAAC,QAAA;cACA,KAAAzB,aAAA;cACA,KAAAsC,QAAA;gBAAAC,IAAA;gBAAA/C,OAAA,EAAA6C;cAAA;cACA;cACA,KAAAhB,WAAA;YACA,GAAAmB,KAAA,CAAAC,GAAA,SAAAH,QAAA;cAAAC,IAAA;cAAA/C,OAAA,EAAAiD,GAAA,CAAAjD;YAAA;UACA,SAAAkD,CAAA;YACA,KAAAJ,QAAA;cAAAC,IAAA;cAAA/C,OAAA,EAAAkD,CAAA,CAAAlD;YAAA;UACA;QACA;MACA;IACA;IACA;IACAoD,eAAAC,KAAA,EAAAC,IAAA;MACA,KAAA7C,gBAAA;MACA,MAAAkB,QAAA,GAAA2B,IAAA,CAAAD,KAAA;MACA;MACA,KAAA/D,cAAA;QACA6B,OAAA,EAAAQ,QAAA,CAAAR,OAAA;QACA3B,OAAA,EAAAmC,QAAA,CAAAnC,OAAA;QACAI,QAAA,EAAA+B,QAAA,CAAA/B,QAAA;QACAwB,UAAA;QACAhC,QAAA;QACAU,cAAA;QACAG,WAAA,EAAA0B,QAAA,CAAA1B;MACA;MACA;IACA;;IACA;IACAsD,eAAAF,KAAA,EAAAC,IAAA;MACA,KAAA5C,gBAAA;MACA,MAAA8C,QAAA,GAAAF,IAAA,CAAAD,KAAA;MACA;MACA,KAAAhC,cAAA;QACAC,OAAA,EAAAkC,QAAA,CAAAlC,OAAA;QACAC,SAAA,EAAAiC,QAAA,CAAAjC,SAAA;QACAC,SAAA,EAAAgC,QAAA,CAAAhC,SAAA;QAEAzB,WAAA,EAAAyD,QAAA,CAAAzD;MACA;IAEA;IACA;IACA0D,eAAAJ,KAAA,EAAAC,IAAA;MACA,KAAA1C,gBAAA;MACA,MAAA4C,QAAA,GAAAF,IAAA,CAAAD,KAAA;MACA,IAAAK,GAAA,GAAAF,QAAA,CAAAG,eAAA;MACA,MAAAA,eAAA,GAAAjB,IAAA,CAAAkB,KAAA,CAAAF,GAAA;MACA;MACA,KAAA7C,cAAA;QACAS,OAAA,EAAAkC,QAAA,CAAAlC,OAAA;QACAC,SAAA,EAAAiC,QAAA,CAAAjC,SAAA;QACAC,SAAA,EAAAgC,QAAA,CAAAhC,SAAA;QACAzB,WAAA,EAAAyD,QAAA,CAAAzD,WAAA;QACAiB,aAAA,EAAA2C,eAAA,CAAA3C,aAAA;QACA6C,UAAA,EAAAF,eAAA,CAAAE,UAAA;QACAC,GAAA,EAAAH,eAAA,CAAAG,GAAA;QACAC,KAAA,EAAAJ,eAAA,CAAAI,KAAA;QACAC,UAAA,EAAAL,eAAA,CAAAK,UAAA;QACAhD,aAAA,EAAA2C,eAAA,CAAA3C,aAAA;QACAiD,cAAA,EAAAN,eAAA,CAAAM,cAAA;QACAC,oBAAA,EAAAP,eAAA,CAAAO,oBAAA;QACAC,uBAAA,EAAAR,eAAA,CAAAQ,uBAAA;QACAC,WAAA,EAAAT,eAAA,CAAAS,WAAA;QACAC,QAAA,EAAAV,eAAA,CAAAU,QAAA;QACAC,OAAA,EAAAX,eAAA,CAAAW,OAAA;QACAC,MAAA,EAAAZ,eAAA,CAAAY;MACA;IAGA;IACA;IACA,MAAAC,WAAAvC,QAAA;MACA,WAAAC,KAAA,CAAAD,QAAA,EAAAK,QAAA,OAAAC,KAAA;QACA,IAAAA,KAAA;UACA;YACA,MAAAZ,QAAA;cACAR,OAAA,OAAA7B,cAAA,CAAA6B,OAAA;cACA/B,QAAA,OAAAE,cAAA,CAAAF,QAAA;cACAa,WAAA,OAAAX,cAAA,CAAAW;YACA;YACA,WAAAuC,MAAA,CAAAC,QAAA,uBAAAC,IAAA,CAAAC,SAAA,CAAAhB,QAAA,GACAiB,IAAA,CAAAC,GAAA;cACA,KAAAb,SAAA,CAAAC,QAAA;cACA,KAAAxB,gBAAA;cACA,KAAAqC,QAAA;gBAAAC,IAAA;gBAAA/C,OAAA,EAAA6C;cAAA;cACA;cACA,KAAAjB,WAAA;YACA,GAAAoB,KAAA,CAAAC,GAAA,SAAAH,QAAA;cAAAC,IAAA;cAAA/C,OAAA,EAAAiD,GAAA,CAAAjD;YAAA;UACA,SAAAkD,CAAA;YACA,KAAAJ,QAAA;cAAAC,IAAA;cAAA/C,OAAA,EAAAkD,CAAA,CAAAlD;YAAA;UACA;QACA;MACA;IACA;IACA;IACA,MAAAyE,aAAAxC,QAAA;MACA;QACA,MAAAuB,QAAA;UACAxC,aAAA,OAAAH,cAAA,CAAAG,aAAA;UACA6C,UAAA,OAAAhD,cAAA,CAAAgD,UAAA;UACAC,GAAA,OAAAjD,cAAA,CAAAiD,GAAA;UACAC,KAAA,OAAAlD,cAAA,CAAAkD,KAAA;UACAW,eAAA,OAAA7D,cAAA,CAAA6D,eAAA;UACAV,UAAA,OAAAnD,cAAA,CAAAmD,UAAA;UACAC,cAAA,OAAApD,cAAA,CAAAoD,cAAA;UACAC,oBAAA,OAAArD,cAAA,CAAAqD,oBAAA;UACAC,uBAAA,OAAAtD,cAAA,CAAAsD,uBAAA;UACAC,WAAA,OAAAvD,cAAA,CAAAuD,WAAA;UACAC,QAAA,OAAAxD,cAAA,CAAAwD,QAAA;UACAC,OAAA,OAAAzD,cAAA,CAAAyD;QACA;QAEA,WAAA9B,MAAA,CAAAC,QAAA,iBAAAC,IAAA,CAAAC,SAAA,CAAAa,QAAA,GACAZ,IAAA,CAAAC,GAAA;UACA,KAAAb,SAAA,CAAAC,QAAA;UACA,KAAAvB,gBAAA;UACA,KAAAoC,QAAA;YAAAC,IAAA;YAAA/C,OAAA,EAAA6C;UAAA;UACA;UACA;QACA,GAAAG,KAAA,CAAAC,GAAA,SAAAH,QAAA;UAAAC,IAAA;UAAA/C,OAAA,EAAAiD,GAAA,CAAAjD;QAAA;MACA,SAAAkD,CAAA;QACA,KAAAJ,QAAA;UAAAC,IAAA;UAAA/C,OAAA,EAAAkD,CAAA,CAAAlD;QAAA;MACA;IACA;IAEA;IACA2E,iBAAAC,GAAA;MACA,KAAAtE,SAAA,GAAAsE,GAAA;MACA,KAAAvE,OAAA;MACA,KAAAuB,WAAA;IACA;IACA;IACAiD,oBAAAD,GAAA;MACA,KAAAvE,OAAA,GAAAuE,GAAA;MACA,KAAAhD,WAAA;IACA;IACA;IACA,MAAAA,YAAA;MACA;QACA;UAAAvB,OAAA;UAAAC;QAAA;QACA,IAAAd,OAAA,QAAAW,UAAA,CAAAX,OAAA;QACA,MAAAb,GAAA;QACA,KAAAA,GAAA,CAAAI,IAAA,CAAAS,OAAA;UACA,IAAAA,OAAA;YACAA,OAAA;UACA;QACA;QACA,IAAAI,QAAA,QAAAO,UAAA,CAAAP,QAAA;QACA,MAAAkF,QAAA;QACA,KAAAA,QAAA,CAAA/F,IAAA,CAAAa,QAAA;UACA,IAAAA,QAAA;YACAA,QAAA;UACA;QACA;QACA,IAAAK,WAAA,GAAA8E,MAAA,CAAAC,QAAA,MAAA7E,UAAA,CAAAF,WAAA;QACA,IAAAA,WAAA,QAAAA,WAAA,aACA,IAAAA,WAAA,QAAAA,WAAA,GAAA/B,gBAAA,MACA,IAAA+B,WAAA,QAAAA,WAAA,GAAA9B,iBAAA;QACA,WAAAqE,MAAA,CAAAC,QAAA,gBAAAC,IAAA,CAAAC,SAAA;UAAAtC,OAAA;UAAAC,SAAA;UAAAd,OAAA;UAAAI,QAAA;UAAAK;QAAA;MACA,SAAAiD,CAAA;QACA,KAAAJ,QAAA;UAAAC,IAAA;UAAA/C,OAAA,EAAAkD,CAAA,CAAAlD;QAAA;MACA;IACA;IACA;IACA,MAAA6B,YAAA;MACA;MACA;QACAoD,OAAA,CAAAC,GAAA,MAAAC,MAAA,CAAAC,KAAA,CAAAC,SAAA;QACA,IAAAA,SAAA,QAAAF,MAAA,CAAAC,KAAA,CAAAC,SAAA;QACA;UAAAhF,OAAA;UAAAC;QAAA;QACA,IAAAd,OAAA,QAAAW,UAAA,CAAAX,OAAA;QAEA,MAAAb,GAAA;QACA,KAAAA,GAAA,CAAAI,IAAA,CAAAS,OAAA;UACA,IAAAA,OAAA;YACAA,OAAA;UACA;QACA;QACA,IAAAI,QAAA,QAAAO,UAAA,CAAAP,QAAA;QACA,IAAAQ,WAAA,QAAAD,UAAA,CAAAC,WAAA;QACA,MAAA0E,QAAA;QACA,KAAAA,QAAA,CAAA/F,IAAA,CAAAa,QAAA;UACA,IAAAA,QAAA;YACAA,QAAA;UACA;QACA;QACA,IAAAG,WAAA;QACA,WAAAyC,MAAA,CAAAC,QAAA,gBAAAC,IAAA,CAAAC,SAAA;UAAAtC,OAAA;UAAAC,SAAA;UAAAd,OAAA;UAAAI,QAAA;UAAAG,WAAA;UAAAK;QAAA;MACA,SAAA8C,CAAA;QACA,KAAAJ,QAAA;UAAAC,IAAA;UAAA/C,OAAA,EAAAkD,CAAA,CAAAlD;QAAA;MACA;IACA;IACA;IACA,MAAA8B,cAAA;MAEA;QAEA;QACA,IAAAuD,SAAA,QAAAF,MAAA,CAAAC,KAAA,CAAAC,SAAA;QACA;UAAAhF,OAAA;UAAAC;QAAA;QACA,IAAAd,OAAA,QAAAW,UAAA,CAAAX,OAAA;QAEA,MAAAb,GAAA;QACA,KAAAA,GAAA,CAAAI,IAAA,CAAAS,OAAA;UACA,IAAAA,OAAA;YACAA,OAAA;UACA;QACA;QACA,IAAAI,QAAA,QAAAO,UAAA,CAAAP,QAAA;QACA,IAAAQ,WAAA,QAAAD,UAAA,CAAAC,WAAA;QACA,MAAA0E,QAAA;QACA,KAAAA,QAAA,CAAA/F,IAAA,CAAAa,QAAA;UACA,IAAAA,QAAA;YACAA,QAAA;UACA;QACA;QAEA,IAAAG,WAAA;QACA,WAAAyC,MAAA,CAAAC,QAAA,kBAAAC,IAAA,CAAAC,SAAA;UAAAtC,OAAA;UAAAC,SAAA;UAAAd,OAAA;UAAAI,QAAA;UAAAG,WAAA;UAAAK,WAAA;UAAAiF;QAAA;QACA;;QAEA;MAEA,SAAAnC,CAAA;QACA,KAAAJ,QAAA;UAAAC,IAAA;UAAA/C,OAAA,EAAAkD,CAAA,CAAAlD;QAAA;MACA;IACA;IACA;IACAsF,gBAAArD,QAAA;MACA,KAAAD,SAAA,CAAAC,QAAA;MACA,KAAA9B,UAAA,CAAAF,WAAA,QAAAA,WAAA,IAAAxB,KAAA;IACA;IACA;IACA8G,OAAA;MACA,KAAAlF,OAAA;MACA,KAAAC,SAAA,QAAAC,UAAA;MACA,KAAAsB,WAAA;IACA;IAEA;IACA2D,OAAAC,IAAA,EAAAC,EAAA;MACA;MACA,KAAAC,OAAA,CAAAC,IAAA;QAAAH,IAAA,EAAAA,IAAA;QAAAL,KAAA;UAAAS,cAAA,EAAAH;QAAA;MAAA;MACA;IAEA;;IACA;IACAI,aAAAL,IAAA;MACA,IAAAM,IAAA,QAAAZ,MAAA,CAAAM,IAAA;MACA,IAAAM,IAAA,CAAAC,QAAA;QACA,OAAAP,IAAA;MACA;QACA,kBAAAA,IAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}