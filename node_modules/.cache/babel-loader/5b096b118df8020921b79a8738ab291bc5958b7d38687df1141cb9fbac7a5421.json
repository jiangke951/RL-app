{"ast":null,"code":"import { mapGetters } from 'vuex';\nimport friendlyDate from '@/utils/friendlyDate';\nexport default {\n  name: 'Notice',\n  data() {\n    return {\n      // 获取时间差\n      friendlyDate\n    };\n  },\n  computed: {\n    ...mapGetters(['front_notice_list', 'readlist', 'userinfo'])\n  },\n  mounted() {\n    this.getNoticeList();\n  },\n  methods: {\n    // 获取用户信息\n    async getUserInfo(user_id) {\n      try {\n        await this.$store.dispatch('getUserInfo', {\n          user_id\n        });\n      } catch (e) {\n        console.warn(e.message);\n      }\n    },\n    // 获取通知列表\n    async getNoticeList() {\n      try {\n        await this.$store.dispatch('frontGetNoticeList', {\n          user_id: this.userinfo.user_id\n        });\n      } catch (e) {\n        this.$message({\n          type: 'warning',\n          message: e.message\n        });\n      }\n    },\n    // 查看详情\n    async showNoticeDetail(index, rows) {\n      const {\n        notice_title,\n        notice_detail,\n        notice_id,\n        is_read,\n        user_id\n      } = rows[index];\n      // console.log(rows[index])\n      await this.$alert(notice_detail, notice_title, {\n        confirmButtonText: '确定',\n        callback: async action => {\n          if (is_read !== '已读') {\n            // 设置阅读状态为已读\n            await this.setRead(user_id, notice_id);\n            // 重新获取用户信息\n            await this.getUserInfo(user_id);\n            // 重新获取通知列表\n            await this.getNoticeList();\n          }\n          return 'ok';\n        }\n      });\n    },\n    // 设置通知状态为已读\n    async setRead(user_id, notice_id) {\n      try {\n        await this.$store.dispatch('frontSetRead', {\n          user_id,\n          notice_id\n        });\n      } catch (e) {\n        console.warn(e.message);\n      }\n    },\n    // 全部已读\n    async setAllRead() {\n      try {\n        const user_id = this.userinfo.user_id;\n        await this.$store.dispatch('frontAllSetRead', {\n          user_id\n        }).then(async res => {\n          // 重新获取用户信息\n          await this.getUserInfo(user_id);\n          // 重新获取通知列表\n          await this.getNoticeList();\n          // \n          this.$notify({\n            title: '成功',\n            type: 'success',\n            message: '已清空未读通知'\n          });\n        });\n      } catch (e) {\n        console.warn(e.message);\n      }\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","friendlyDate","name","data","computed","mounted","getNoticeList","methods","getUserInfo","user_id","$store","dispatch","e","console","warn","message","userinfo","$message","type","showNoticeDetail","index","rows","notice_title","notice_detail","notice_id","is_read","$alert","confirmButtonText","callback","action","setRead","setAllRead","then","res","$notify","title"],"sources":["src/views/Index/Front/Notice/index.vue"],"sourcesContent":["<template>\r\n    <div class=\"notice maxWH\">\r\n        <!-- 头部 -->\r\n        <div class=\"header flex\">\r\n            <span class=\"title\">消息通知</span>\r\n        </div>\r\n        <!-- 主体 -->\r\n        <main class=\"main\">\r\n            <!-- 已读按钮 -->\r\n            <div class=\"read flex-center\">\r\n                <el-button\r\n                    type=\"text\"\r\n                    :disabled=\"(readlist.length < 1)\"\r\n                    @click.native.prevent.stop=\"setAllRead\">全部已读</el-button>\r\n            </div>\r\n            <!-- 显示通知 -->\r\n            <el-table :data=\"front_notice_list\" height=\"350\" style=\"width: 100%\">\r\n                <el-table-column prop=\"notice_title\">\r\n                    <span slot-scope=\"scope\" style=\"position: relative;\">\r\n                        <p>{{ scope.row.notice_title }}</p>\r\n                        <span>{{ friendlyDate(scope.row.create_time) }}</span>\r\n                        <i v-if=\"(scope.row.is_read === '未读')\" class=\"el-icon-warning\"\r\n                            style=\"position: absolute;top: 60%;transform: translateY(-50%);color: tomato;\"></i>\r\n                    </span>\r\n                </el-table-column>\r\n                <el-table-column header-align=\"center\" align=\"right\">\r\n                    <template slot-scope=\"scope\">\r\n                        <div class=\"handler\">\r\n                            <el-button @click.native.prevent=\"showNoticeDetail(scope.$index, front_notice_list)\"\r\n                                type=\"info\" round>\r\n                                查看\r\n                            </el-button>\r\n                        </div>\r\n                    </template>\r\n                </el-table-column>\r\n            </el-table>\r\n        </main>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters } from 'vuex'\r\nimport friendlyDate from '@/utils/friendlyDate'\r\nexport default {\r\n    name: 'Notice',\r\n    data() {\r\n        return {\r\n            // 获取时间差\r\n            friendlyDate,\r\n        }\r\n    },\r\n    computed: {\r\n        ...mapGetters(['front_notice_list', 'readlist', 'userinfo'])\r\n    },\r\n    mounted() {\r\n        this.getNoticeList()\r\n    },\r\n    methods: {\r\n        // 获取用户信息\r\n        async getUserInfo(user_id) {\r\n            try {\r\n                await this.$store.dispatch('getUserInfo', { user_id })\r\n            } catch (e) {\r\n                console.warn(e.message)\r\n            }\r\n        },\r\n        // 获取通知列表\r\n        async getNoticeList() {\r\n            try {\r\n                await this.$store.dispatch('frontGetNoticeList', { user_id: this.userinfo.user_id })\r\n            } catch (e) {\r\n                this.$message({ type: 'warning', message: e.message })\r\n            }\r\n        },\r\n        // 查看详情\r\n        async showNoticeDetail(index, rows) {\r\n            const { notice_title, notice_detail, notice_id, is_read, user_id } = rows[index]\r\n            // console.log(rows[index])\r\n            await this.$alert(notice_detail, notice_title, {\r\n                confirmButtonText: '确定',\r\n                callback: async action => {\r\n                    if (is_read !== '已读') {\r\n                        // 设置阅读状态为已读\r\n                        await this.setRead(user_id, notice_id)\r\n                        // 重新获取用户信息\r\n                        await this.getUserInfo(user_id)\r\n                        // 重新获取通知列表\r\n                        await this.getNoticeList()\r\n                    }\r\n                    return 'ok'\r\n                }\r\n            })\r\n        },\r\n        // 设置通知状态为已读\r\n        async setRead(user_id, notice_id) {\r\n            try {\r\n                await this.$store.dispatch('frontSetRead', { user_id, notice_id })\r\n            } catch (e) {\r\n                console.warn(e.message)\r\n            }\r\n        },\r\n        // 全部已读\r\n        async setAllRead() {\r\n            try {\r\n                const user_id = this.userinfo.user_id\r\n                await this.$store.dispatch('frontAllSetRead', { user_id })\r\n                    .then(async res => {\r\n                        // 重新获取用户信息\r\n                        await this.getUserInfo(user_id)\r\n                        // 重新获取通知列表\r\n                        await this.getNoticeList()\r\n                        // \r\n                        this.$notify({ title: '成功', type: 'success', message: '已清空未读通知' })\r\n                    })\r\n            } catch (e) {\r\n                console.warn(e.message)\r\n            }\r\n        },\r\n    }\r\n\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.notice {\r\n    .header {\r\n        width: 100%;\r\n        height: 100px;\r\n        background-color: #324057;\r\n        box-sizing: border-box;\r\n        padding: 50px 20% 10px;\r\n        overflow: hidden;\r\n\r\n        .title {\r\n            font-size: 25px;\r\n            color: #fff;\r\n        }\r\n    }\r\n\r\n    .main {\r\n        width: 100%;\r\n        height: calc(100% - 100px);\r\n        box-sizing: border-box;\r\n        padding: 20px 20%;\r\n\r\n        .read {\r\n            width: 100%;\r\n            justify-content: flex-end;\r\n        }\r\n    }\r\n}\r\n</style>"],"mappings":"AAyCA,SAAAA,UAAA;AACA,OAAAC,YAAA;AACA;EACAC,IAAA;EACAC,KAAA;IACA;MACA;MACAF;IACA;EACA;EACAG,QAAA;IACA,GAAAJ,UAAA;EACA;EACAK,QAAA;IACA,KAAAC,aAAA;EACA;EACAC,OAAA;IACA;IACA,MAAAC,YAAAC,OAAA;MACA;QACA,WAAAC,MAAA,CAAAC,QAAA;UAAAF;QAAA;MACA,SAAAG,CAAA;QACAC,OAAA,CAAAC,IAAA,CAAAF,CAAA,CAAAG,OAAA;MACA;IACA;IACA;IACA,MAAAT,cAAA;MACA;QACA,WAAAI,MAAA,CAAAC,QAAA;UAAAF,OAAA,OAAAO,QAAA,CAAAP;QAAA;MACA,SAAAG,CAAA;QACA,KAAAK,QAAA;UAAAC,IAAA;UAAAH,OAAA,EAAAH,CAAA,CAAAG;QAAA;MACA;IACA;IACA;IACA,MAAAI,iBAAAC,KAAA,EAAAC,IAAA;MACA;QAAAC,YAAA;QAAAC,aAAA;QAAAC,SAAA;QAAAC,OAAA;QAAAhB;MAAA,IAAAY,IAAA,CAAAD,KAAA;MACA;MACA,WAAAM,MAAA,CAAAH,aAAA,EAAAD,YAAA;QACAK,iBAAA;QACAC,QAAA,QAAAC,MAAA;UACA,IAAAJ,OAAA;YACA;YACA,WAAAK,OAAA,CAAArB,OAAA,EAAAe,SAAA;YACA;YACA,WAAAhB,WAAA,CAAAC,OAAA;YACA;YACA,WAAAH,aAAA;UACA;UACA;QACA;MACA;IACA;IACA;IACA,MAAAwB,QAAArB,OAAA,EAAAe,SAAA;MACA;QACA,WAAAd,MAAA,CAAAC,QAAA;UAAAF,OAAA;UAAAe;QAAA;MACA,SAAAZ,CAAA;QACAC,OAAA,CAAAC,IAAA,CAAAF,CAAA,CAAAG,OAAA;MACA;IACA;IACA;IACA,MAAAgB,WAAA;MACA;QACA,MAAAtB,OAAA,QAAAO,QAAA,CAAAP,OAAA;QACA,WAAAC,MAAA,CAAAC,QAAA;UAAAF;QAAA,GACAuB,IAAA,OAAAC,GAAA;UACA;UACA,WAAAzB,WAAA,CAAAC,OAAA;UACA;UACA,WAAAH,aAAA;UACA;UACA,KAAA4B,OAAA;YAAAC,KAAA;YAAAjB,IAAA;YAAAH,OAAA;UAAA;QACA;MACA,SAAAH,CAAA;QACAC,OAAA,CAAAC,IAAA,CAAAF,CAAA,CAAAG,OAAA;MACA;IACA;EACA;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}