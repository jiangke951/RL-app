{"ast":null,"code":"import { mapGetters } from 'vuex';\nimport shap from 'shap';\nimport ChartComponent from '../../Home/ChartComponent.vue';\nimport axios from 'axios';\nimport { requestsA, requestsB, requestsC } from '../../../../api/axios';\nexport default {\n  name: 'lida',\n  components: {\n    ChartComponent\n  },\n  data() {\n    return {\n      file: null,\n      formData: {\n        category: '',\n        goal: ''\n        // 可以添加更多表单字段  \n      },\n\n      uploadedData: null,\n      goalDescription: '',\n      // 用于存储用户输入的目标描述  \n      // selectedVisualizationLibrary: 'matplotlib', // 用于存储用户选择的可视化库 \n      selectedGoal: '',\n      // 用于v-model绑定的变量  \n      selectedImageUrl: '',\n      // 用于存储选中的图片URL  \n      selectedCode: '',\n      // 用于存储选中的代码  \n      uploadedData: {\n        chartData: [\n          //  ['column', 'dtype', 'samples', 'num_unique_values', 'semantic_type', 'description'], ['Name', 'string', \"['Nissan Altima S 4dr', 'Mercury Marauder 4dr', 'Toyota Prius 4dr (gas/electric)']\", 385, '', ''], ['Type', 'category', \"['SUV', 'Minivan', 'Sports Car']\", 5, '', ''], ['AWD', 'number', 0, 0, 1, '[1, 0]', 2, '', ''], ['RWD', 'number', 0, 0, 1, '[1, 0]', 2, '', ''], ['Retail_Price', 'number', 19724, 10280, 192465, '[22775, 37245]', 370, '', ''], ['Dealer_Cost', 'number', 17901, 9875, 173560, '[18030, 31558]', 384, '', ''], ['Engine_Size__l_', 'number', 1.0266787710109588, 0.0, 6.0, '[2.2, 5.3]', 40, '', ''], ['Cyl', 'number', 1, 0, 12, '[4, 9]', 8, '', ''], ['Horsepower_HP_', 'number', 70, 73, 493, '[126, 138]', 100, '', ''], ['City_Miles_Per_Gallon', 'number', 50, 10, 1000, '[59, 32]', 29, '', ''], ['Highway_Miles_Per_Gallon', 'number', 57, -1100, 66, '[43, 37]', 33, '', ''], ['Weight', 'number', 706, 1850, 6400, '[4473, 3472]', 315, '', ''], ['Wheel_Base', 'number', 8, 0, 130, '[110, 0]', 34, '', ''], ['Len', 'number', 13, 143, 221, '[197, 183]', 60, '', ''], ['Width', 'number', 4, 2, 81, '[72, 70]', 19, '', '']\n        ],\n        goalData: [\n          // { id: 0, name: 'What is the distribution of Retail Price among different car types?', value: 'bar chart showing average Retail Price by Type', imageUrl: 'http://127.0.0.1:9540/static/test.png', code: 'console.log(\"代码1\");'  },  \n          // { id: 1, name: 'How does Engine Size vary with Horsepower for different cars?', value: 'scatter plot of Engine Size vs. Horsepower colored by Type', imageUrl: 'http://127.0.0.1:9540/static/test.png', code: 'console.log(\"代码1\");'  } \n        ]\n      }\n    };\n  },\n  watch: {\n    // 监听selectedGoal的变化，并更新selectedImageUrl和selectedCode  \n    selectedGoal(newValue) {\n      const goal = this.uploadedData.goalData.find(goal => goal.value === newValue);\n      if (goal) {\n        this.selectedImageUrl = 'data:image/png;base64,' + goal.imageUrl;\n        this.selectedCode = goal.code;\n      } else {\n        console.log('nogoal:', goal.imageUrl);\n        this.selectedImageUrl = '';\n        this.selectedCode = '';\n      }\n    }\n  },\n  computed: {\n    grayBoxStyle() {\n      // 如果没有选择图像，则返回一个包含背景颜色的样式对象  \n      // 否则返回一个空对象（因为图像已经设置了样式）  \n      return this.selectedImageUrl ? {} : {\n        backgroundColor: '#f0f0f0'\n      }; // 假设您想要灰色背景  \n    }\n  },\n\n  methods: {\n    onFileChange(e) {\n      this.file = e.target.files[0];\n    },\n    onCategoryChange(e) {\n      // 这里通常不需要做什么，因为v-model已经处理了双向绑定  \n      // 但你可以在这里添加额外的逻辑，比如验证  \n    },\n    submitForm() {\n      const formData = new FormData();\n      formData.append('file', this.file);\n      formData.append('category', this.formData.category);\n      formData.append('goal', this.formData.goal);\n      // 添加更多表单字段  \n      console.log(formData.file);\n      console.log(formData.category);\n    },\n    handleFileUpload(event) {\n      // 处理文件上传的逻辑，例如读取文件内容  \n\n      const file = event.target.files[0];\n      if (file) {\n        // 这里只是模拟，实际中您可能需要将文件发送到服务器  \n        console.log('File uploaded:', file.name);\n        // 假设服务器返回了某些数据  \n        // this.uploadedData = { message: '文件上传成功' };  \n        // 创建一个 FormData 实例  \n        const formData = new FormData();\n        // 将文件添加到 FormData 实例中  \n        // 假设后端接口期望的文件字段名为 \"file\"  \n        formData.append('file', file);\n        requestsC.post('http://127.0.0.1:9540/lida/front/test/sendForm', formData, {\n          headers: {\n            // 设置 Content-Type 为 multipart/form-data，但通常这一步是可选的，  \n            // 因为 axios 会自动设置正确的 Content-Type 当你传递一个 FormData 实例  \n            'Content-Type': 'multipart/form-data' // 通常不需要这行  \n          }\n        }).then(response => {\n          console.log('成功:', response.data);\n          this.uploadedData.chartData = response.data.chartData;\n          this.uploadedData.goalData = response.data.goalData;\n\n          // 这里可以处理上传成功后的逻辑，如更新UI等  \n        }).catch(error => {\n          console.error('错误:', error);\n          // 这里可以处理上传失败后的逻辑，如显示错误信息  \n        });\n      }\n    },\n\n    submitFileUpload() {\n      // 在这个示例中，我们不需要这个方法，因为文件选择即触发上传  \n      // 如果您需要额外的上传按钮来触发上传逻辑（例如，在选择了文件后），请取消注释以下代码  \n      // 并在handleFileUpload中添加逻辑以区分是立即上传还是稍后上传  \n      // console.log('Submitting file...');  \n    },\n    generateVisualization() {\n      // 这里可以添加将数据和可视化库提交到服务器的逻辑  \n      // 或者在前端进行处理的逻辑  \n      console.log('目标描述:', this.goalDescription);\n      console.log('选择的可视化库:', this.selectedVisualizationLibrary);\n      // 示例：调用某个函数或API来生成可视化  \n      // generateVisualizationData(this.goalDescription, this.selectedVisualizationLibrary);  \n    },\n\n    fetchImage() {\n      // ...（与之前相同的方法实现）  \n      const goal = this.uploadedData.goalData.find(goal => goal.value === this.selectedGoal);\n      if (goal) {\n        this.selectedImageUrl = goal.imageUrl;\n      } else {\n        this.selectedImageUrl = null;\n      }\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","shap","ChartComponent","axios","requestsA","requestsB","requestsC","name","components","data","file","formData","category","goal","uploadedData","goalDescription","selectedGoal","selectedImageUrl","selectedCode","chartData","goalData","watch","newValue","find","value","imageUrl","code","console","log","computed","grayBoxStyle","backgroundColor","methods","onFileChange","e","target","files","onCategoryChange","submitForm","FormData","append","handleFileUpload","event","post","headers","then","response","catch","error","submitFileUpload","generateVisualization","selectedVisualizationLibrary","fetchImage"],"sources":["src/views/Index/Front/lida/index.vue"],"sourcesContent":["<template>\r\n    <div class=\"feedback maxWH\">\r\n        <!-- 头部 -->\r\n        <div class=\"header flex\">\r\n            <span class=\"title\">lida 试用</span>\r\n        </div>\r\n        <!-- 主体 -->\r\n        <main class=\"main\">  \r\n            <div class=\"container\">  \r\n                <div class=\"sidebar\">  \r\n                    <p class=\"tip\">1、上传数据( 选择一个CSV文件)</p>\r\n                    <div class=\"file-upload-wrapper\">  \r\n                        <!-- 使用label包裹input，并通过for和id关联 -->  \r\n                        <label for=\"file-upload\" class=\"file-upload-label\">  \r\n                           选择上传  (limit 200MB)\r\n                            <!-- 通过CSS隐藏input元素 -->  \r\n                            <input type=\"file\" id=\"file-upload\" @change=\"onFileChange\" accept=\".csv\" style=\"display: none;\"/>  \r\n                        </label>  \r\n                    </div>  \r\n                    <p class=\"tip\">2、描述你的目标</p>\r\n                    <!-- 新增的input输入框 -->  \r\n                    <input type=\"text\" class=\"goal-input\" placeholder=\"请输入你的目标描述\" v-model=\"formData.goal\">  \r\n                    <p class=\"tip\">3、选择一个可视化库</p>\r\n                     <!-- 新增的下拉框 -->  \r\n                    <select v-model=\"formData.category\" @change=\"onCategoryChange\" class=\"library\">  \r\n                        <option value=\"seaborn\">seaborn</option>  \r\n                        <option value=\"matplotlib\">matplotlib</option>  \r\n                        <option value=\"plotly\">plotly</option>  \r\n                    </select>  \r\n                    <div class=\"button-wrapper\">  \r\n                        <button @click=\"submitForm\" class=\"beautiful-button\">生成</button>  \r\n                    </div>  \r\n                </div>  \r\n                \r\n                <div class=\"image-display\">  \r\n                    <p>数据摘要</p> \r\n                    <div class=\"gray-box\">  \r\n        \r\n                        <chart-component :data=\"uploadedData.chartData\" />     \r\n                    \r\n                    </div>  \r\n                    <p>选择一个可视化目标</p> \r\n                    <div class=\"goal\">\r\n                        <select v-model=\"selectedGoal\">  \r\n                            \r\n                            <option  \r\n                            v-for=\"goal in uploadedData.goalData\"   \r\n                            :value=\"goal.value\"> <!-- 假设每个goal对象都有一个用于显示的value -->  \r\n                            {{ goal.name }} <!-- 假设每个goal对象都有一个用于显示的name -->  \r\n                            </option>  \r\n                         </select>  \r\n                    </div>\r\n                    <div class=\"gray-box1\" :style=\"grayBoxStyle\">  \r\n                         <img v-if=\"selectedImageUrl\" :src=\"selectedImageUrl\" alt=\"Selected Image\" style=\"width: 100%; height: auto;\">  \r\n                    </div>  \r\n                    <p>可视化代码</p> \r\n                    <div class=\"gray-box1\" >  \r\n                        <pre><code>  \r\n                           {{selectedCode}}\r\n                        </code></pre>\r\n                    </div>  \r\n                </div>  \r\n                \r\n            </div>  \r\n\r\n        </main>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters } from 'vuex'\r\nimport shap from 'shap'\r\nimport ChartComponent from '../../Home/ChartComponent.vue'\r\nimport axios from 'axios'\r\nimport { requestsA, requestsB, requestsC } from '../../../../api/axios'\r\nexport default {\r\n    name: 'lida',\r\n    components: {  \r\n    ChartComponent  \r\n  }, \r\n    data() {\r\n       \r\n        return {\r\n            file: null,\r\n            formData: {  \r\n                category: '',  \r\n                goal: ''  \r\n                // 可以添加更多表单字段  \r\n            },\r\n            uploadedData: null,  \r\n            goalDescription: '', // 用于存储用户输入的目标描述  \r\n            // selectedVisualizationLibrary: 'matplotlib', // 用于存储用户选择的可视化库 \r\n            selectedGoal: '', // 用于v-model绑定的变量  \r\n            selectedImageUrl: '', // 用于存储选中的图片URL  \r\n            selectedCode: '', // 用于存储选中的代码  \r\n            uploadedData: {  \r\n                 chartData: [  \r\n                //  ['column', 'dtype', 'samples', 'num_unique_values', 'semantic_type', 'description'], ['Name', 'string', \"['Nissan Altima S 4dr', 'Mercury Marauder 4dr', 'Toyota Prius 4dr (gas/electric)']\", 385, '', ''], ['Type', 'category', \"['SUV', 'Minivan', 'Sports Car']\", 5, '', ''], ['AWD', 'number', 0, 0, 1, '[1, 0]', 2, '', ''], ['RWD', 'number', 0, 0, 1, '[1, 0]', 2, '', ''], ['Retail_Price', 'number', 19724, 10280, 192465, '[22775, 37245]', 370, '', ''], ['Dealer_Cost', 'number', 17901, 9875, 173560, '[18030, 31558]', 384, '', ''], ['Engine_Size__l_', 'number', 1.0266787710109588, 0.0, 6.0, '[2.2, 5.3]', 40, '', ''], ['Cyl', 'number', 1, 0, 12, '[4, 9]', 8, '', ''], ['Horsepower_HP_', 'number', 70, 73, 493, '[126, 138]', 100, '', ''], ['City_Miles_Per_Gallon', 'number', 50, 10, 1000, '[59, 32]', 29, '', ''], ['Highway_Miles_Per_Gallon', 'number', 57, -1100, 66, '[43, 37]', 33, '', ''], ['Weight', 'number', 706, 1850, 6400, '[4473, 3472]', 315, '', ''], ['Wheel_Base', 'number', 8, 0, 130, '[110, 0]', 34, '', ''], ['Len', 'number', 13, 143, 221, '[197, 183]', 60, '', ''], ['Width', 'number', 4, 2, 81, '[72, 70]', 19, '', '']\r\n            ]  ,\r\n              \r\n                goalData: [  \r\n                // { id: 0, name: 'What is the distribution of Retail Price among different car types?', value: 'bar chart showing average Retail Price by Type', imageUrl: 'http://127.0.0.1:9540/static/test.png', code: 'console.log(\"代码1\");'  },  \r\n                // { id: 1, name: 'How does Engine Size vary with Horsepower for different cars?', value: 'scatter plot of Engine Size vs. Horsepower colored by Type', imageUrl: 'http://127.0.0.1:9540/static/test.png', code: 'console.log(\"代码1\");'  } \r\n                ],  \r\n            }  \r\n        }\r\n    },\r\n    watch: {  \r\n    // 监听selectedGoal的变化，并更新selectedImageUrl和selectedCode  \r\n    selectedGoal(newValue) {  \r\n      const goal = this.uploadedData.goalData.find(goal => goal.value === newValue);  \r\n      if (goal) {  \r\n        this.selectedImageUrl = 'data:image/png;base64,' + goal.imageUrl  \r\n        this.selectedCode = goal.code;  \r\n\r\n      } else {  \r\n        console.log('nogoal:', goal.imageUrl)\r\n        this.selectedImageUrl = '';  \r\n        this.selectedCode = '';  \r\n      }  \r\n    },  \r\n  },  \r\n    computed: {\r\n        grayBoxStyle() {  \r\n      // 如果没有选择图像，则返回一个包含背景颜色的样式对象  \r\n      // 否则返回一个空对象（因为图像已经设置了样式）  \r\n      return this.selectedImageUrl ? {} : { backgroundColor: '#f0f0f0' }; // 假设您想要灰色背景  \r\n    },  \r\n    },\r\n    methods: {\r\n        onFileChange(e) {  \r\n            this.file = e.target.files[0];  \r\n         },  \r\n        onCategoryChange(e) {  \r\n             // 这里通常不需要做什么，因为v-model已经处理了双向绑定  \r\n             // 但你可以在这里添加额外的逻辑，比如验证  \r\n        }, \r\n        submitForm() {  \r\n            const formData = new FormData();  \r\n            formData.append('file', this.file);  \r\n            formData.append('category', this.formData.category);  \r\n            formData.append('goal', this.formData.goal);  \r\n            // 添加更多表单字段  \r\n            console.log(formData.file);\r\n            console.log(formData.category);\r\n     \r\n        },\r\n    \r\n        handleFileUpload(event) {  \r\n            // 处理文件上传的逻辑，例如读取文件内容  \r\n\r\n            const file = event.target.files[0];  \r\n            if (file) {  \r\n                // 这里只是模拟，实际中您可能需要将文件发送到服务器  \r\n                console.log('File uploaded:', file.name);  \r\n                // 假设服务器返回了某些数据  \r\n                // this.uploadedData = { message: '文件上传成功' };  \r\n                 // 创建一个 FormData 实例  \r\n                const formData = new FormData();  \r\n                // 将文件添加到 FormData 实例中  \r\n                // 假设后端接口期望的文件字段名为 \"file\"  \r\n                formData.append('file', file);  \r\n                requestsC.post('http://127.0.0.1:9540/lida/front/test/sendForm', formData, {  \r\n                    headers: {  \r\n                        // 设置 Content-Type 为 multipart/form-data，但通常这一步是可选的，  \r\n                        // 因为 axios 会自动设置正确的 Content-Type 当你传递一个 FormData 实例  \r\n                        'Content-Type': 'multipart/form-data', // 通常不需要这行  \r\n                    },  \r\n                })  \r\n                .then(response => {  \r\n                    console.log('成功:', response.data);  \r\n                    this.uploadedData.chartData = response.data.chartData; \r\n                    this.uploadedData.goalData = response.data.goalData; \r\n            \r\n                    // 这里可以处理上传成功后的逻辑，如更新UI等  \r\n                })  \r\n                .catch(error => {  \r\n                    console.error('错误:', error);  \r\n                    // 这里可以处理上传失败后的逻辑，如显示错误信息  \r\n                });  \r\n\r\n            }  \r\n        },  \r\n        submitFileUpload() {  \r\n            // 在这个示例中，我们不需要这个方法，因为文件选择即触发上传  \r\n            // 如果您需要额外的上传按钮来触发上传逻辑（例如，在选择了文件后），请取消注释以下代码  \r\n            // 并在handleFileUpload中添加逻辑以区分是立即上传还是稍后上传  \r\n            // console.log('Submitting file...');  \r\n        },  \r\n        generateVisualization() {  \r\n            // 这里可以添加将数据和可视化库提交到服务器的逻辑  \r\n            // 或者在前端进行处理的逻辑  \r\n            console.log('目标描述:', this.goalDescription);  \r\n            console.log('选择的可视化库:', this.selectedVisualizationLibrary);  \r\n            // 示例：调用某个函数或API来生成可视化  \r\n            // generateVisualizationData(this.goalDescription, this.selectedVisualizationLibrary);  \r\n        },  \r\n        fetchImage() {  \r\n      // ...（与之前相同的方法实现）  \r\n      const goal = this.uploadedData.goalData.find(goal => goal.value === this.selectedGoal);  \r\n      if (goal) {  \r\n        this.selectedImageUrl = goal.imageUrl;  \r\n      } else {  \r\n        this.selectedImageUrl = null;  \r\n      }  \r\n    },  \r\n    },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.header {\r\n    width: 100%;\r\n    height: 100px;\r\n    background-color: #324057;\r\n    box-sizing: border-box;\r\n    padding: 50px 10% 10px;\r\n    overflow: hidden;\r\n\r\n    .title {\r\n        font-size: 25px;\r\n        color: #fff;\r\n    }\r\n}\r\n\r\n.main {\r\n    width: 100%;\r\n    box-sizing: border-box;\r\n    // padding: 50px 10% 0;\r\n\r\n    .container {  \r\n        display: flex;  \r\n        justify-content: space-between;  \r\n        //   padding: 20px;  \r\n}  \r\n  \r\n.sidebar {  \r\n  width: 30%;  \r\n  border-right: 1px solid #ccc;  \r\n  padding-right: 20px; \r\n  background-color: #e9ecef; \r\n  height: 250vh; /* 视口高度的100% */  \r\n  overflow-y: auto; /* 超出部分可滚动 */  \r\n  box-sizing: border-box; /* 防止内边距影响总高度 */  \r\n  .tip{\r\n    // background-color: red; \r\n    padding:10px;\r\n    margin-left:15px;\r\n    font-size: 15px;  \r\n    margin:30px 0 20px 20px\r\n  }\r\n  .file-upload-label {  \r\n\r\n    background-color: #f8f9fa;    \r\n    border: 1px solid #ced4da;  \r\n    color: #495057;  \r\n    margin:0 0 10px 15px;\r\n    padding-top:30px;\r\n    font-size: 15px;  \r\n    // font-weight: 400;  \r\n    line-height: 1.5;  \r\n    text-align: center;  \r\n    vertical-align: middle;  \r\n    cursor: pointer;  \r\n    border-radius: 0.1rem;  \r\n    transition: background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;  \r\n    user-select: none;  \r\n    width: 70%; /* 或者其他适合您布局的宽度 */ \r\n    height:60px; \r\n    display: block; /* 如果您希望它占满整个侧边栏的宽度 */  \r\n}  \r\n.goal-input{\r\n    margin:0 0 10px 20px;\r\n    font-size: 15px;  \r\n    border: 2px solid #ced4da;  \r\n    padding:10px;\r\n    border-radius: 8px;\r\n    padding-right:100px;\r\n}\r\n.library{\r\n    margin:0 0 10px 20px;\r\n    font-size: 15px;  \r\n    border: 2px solid #ced4da;  \r\n    padding:8px;\r\n    padding-right:100px;\r\n    border-radius: 6px; /* 设置圆角 */  \r\n    border: 1px solid #ccc; /* 示例边框 */  \r\n\r\n}\r\n.button-wrapper {  \r\n  margin-top: 40px; /* 可选：增加按钮上方的间距 */  \r\n  margin-left:20px;\r\n}  \r\n  \r\n.beautiful-button {  \r\n  background-color: #324057; \r\n  border: none;  \r\n  color: white;  \r\n  padding: 8px 16px;  \r\n  text-align: center;  \r\n  text-decoration: none;  \r\n  display: inline-block;  \r\n  font-size: 16px;  \r\n  margin: 4px 2px;  \r\n  cursor: pointer;  \r\n  border-radius: 8px; /* 圆角 */  \r\n}  \r\n  \r\n.beautiful-button:hover {  \r\n  background-color: #409EFF; /* 鼠标悬停时的颜色 */  \r\n}  \r\n  \r\n.file-upload-label:hover {  \r\n    background-color: #e9ecef;  \r\n} \r\n\r\n\r\n}  \r\n  \r\n.image-display {  \r\n  width: 70%;  \r\n  display: flex;  \r\n  margin-top:10px;\r\n  flex-direction: column; /* 修改为列方向，使子元素垂直排列 */  \r\n  .gray-box {  \r\n    width: 70%; \r\n    // background-color:#f8f9fa; /* 浅灰色背景 */  \r\n    // padding: 10px; /* 内边距 */  \r\n    border: 1px solid #ddd; /* 边框颜色比背景稍深，增加对比度 */  \r\n    border-radius: 8px; /* 边框圆角 */  \r\n    // margin: 20px 0 0 20px; /* 上边距，以便与其他内容区分 */  \r\n    margin: 20px auto; /* 上下外边距为0，左右外边距自动，以实现水平居中 */ \r\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1); /* 可选的阴影效果，增加立体感 */  \r\n    height: 400px; /* 或你需要的任何固定高度 */  \r\n    overflow-x: auto; /* 当内容宽度超出时显示水平滚动条 */  \r\n}\r\n.gray-box1 {  \r\n    width: 70%; \r\n    // background-color:#f8f9fa; /* 浅灰色背景 */  \r\n    // padding: 10px; /* 内边距 */  \r\n    border: 1px solid #ddd; /* 边框颜色比背景稍深，增加对比度 */  \r\n    border-radius: 8px; /* 边框圆角 */  \r\n    // margin: 20px 0 0 20px; /* 上边距，以便与其他内容区分 */  \r\n    margin: 20px auto; /* 上下外边距为0，左右外边距自动，以实现水平居中 */ \r\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1); /* 可选的阴影效果，增加立体感 */  \r\n    height: 500px; /* 或你需要的任何固定高度 */  \r\n    overflow-x: auto; /* 当内容宽度超出时显示水平滚动条 */  \r\n}\r\n}\r\n.image-display p {  \r\n  margin:10px 0 0 40px;  \r\n  font-size: 15px;  \r\n}  \r\n.goal {  \r\n    width:70%;\r\n    display: flex;  \r\n    text-align:center;\r\n    flex-direction: column; /* 修改为列方向，使子元素垂直排列 */  \r\n    margin:10px 0 0 40px;  \r\n    font-size: 15px;  \r\n    border: 2px solid #ced4da;  \r\n    padding:8px;\r\n    border-radius: 6px; /* 设置圆角 */   \r\n    border: 1px solid #ccc; /* 示例边框 */ \r\n} \r\n\r\n/* 为pre标签设置样式，包括字体、背景色、边距等 */  \r\npre {  \r\n  background-color: #f4f4f4; /* 浅灰色背景 */  \r\n  border: 1px solid #ddd; /* 边框 */  \r\n  border-left: 3px solid #f36d33; /* 左侧边框颜色更深，以突出显示 */  \r\n  color: #666; /* 文本颜色 */  \r\n  page-break-inside: avoid; /* 避免在打印时分割代码块 */  \r\n  font-family: 'Courier New', Courier, monospace; /* 设置字体为等宽字体 */  \r\n  font-size: 15px; /* 字体大小 */  \r\n  line-height: 1.6; /* 行高 */  \r\n  margin-bottom: 1.6em; /* 外边距 */  \r\n  max-width: 100%; /* 最大宽度 */  \r\n  overflow: auto; /* 如果内容超出容器宽度，则显示滚动条 */  \r\n  padding: 1em 1.5em; /* 内边距 */  \r\n  display: block; /* 显式声明为块级元素 */  \r\n  word-wrap: break-word; /* 长单词或URL地址自动换行 */  \r\n}  \r\n  \r\n/* 也可以为code标签设置一些样式，但通常pre的样式就足够了 */  \r\ncode {  \r\n  /* 这里通常不需要太多样式，因为pre已经包含了它 */  \r\n  font-family: inherit; /* 继承pre的字体设置 */  \r\n}\r\n  \r\n\r\n}\r\n\r\n\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}