{"ast":null,"code":"import { mapGetters } from 'vuex';\n//import * as shap from 'shap'\nimport shap from 'shap';\nexport default {\n  name: 'Feedback',\n  data() {\n    return {\n      feedbackFrom: {\n        info: ''\n      },\n      shapHtml: ''\n    };\n  },\n  computed: {\n    ...mapGetters(['userinfo'])\n  },\n  mounted() {\n    // 计算 shap 值\n    const explainer = shap.TreeExplainer.fromModel(this.model);\n    const shapValues = explainer.shapValues(this.X);\n\n    // 选择要画力图的样本\n    const sampleIdx = 0;\n\n    // 生成 HTML 文件\n    const shapHtml = shap.force_plot_html(explainer.expectedValue(1), shapValues[sampleIdx], this.X[sampleIdx], this.featureNames);\n\n    // 在组件中展示生成的 HTML 文件\n    this.$refs.shapPlot.innerHTML = shapHtml;\n  },\n  props: {\n    model: {\n      type: Object,\n      required: true\n    },\n    X: {\n      type: Array,\n      required: true\n    },\n    featureNames: {\n      type: Array,\n      required: true\n    }\n  },\n  methods: {\n    // 获取用户信息\n    async getUserInfo() {\n      try {\n        await this.$store.dispatch('getUserInfo', {\n          user_id: this.userinfo.user_id\n        });\n      } catch (e) {\n        console.warn(e.message);\n      }\n    },\n    // 重置表单\n    resetForm(formname) {\n      this.$refs[formname].resetFields();\n    },\n    // 提交\n    async handlerSubmit() {\n      const feedback_info = this.feedbackFrom.info;\n      const reg = /^[\\s\\S]{5,100}$/;\n      if (feedback_info.trim().length < 1) return;\n      if (feedback_info.trim().length > 0 && !reg.test(feedback_info)) {\n        return this.$message({\n          type: 'warning',\n          message: '请将反馈内容控制在5到100给个字符之间'\n        });\n      }\n      // 提交\n      await this.$confirm('确认提交?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(async () => {\n        try {\n          const reqinfo = {\n            account: this.userinfo.account,\n            username: this.userinfo.username,\n            feedback_info\n          };\n          await this.$store.dispatch('sendFeedback', JSON.stringify(reqinfo)).then(res => {\n            this.$notify({\n              title: '提交成功',\n              type: 'success',\n              message: res\n            });\n            this.resetForm('feedbackFrom');\n          }).catch(err => this.$message({\n            type: 'warning',\n            message: err.message\n          }));\n        } catch (e) {\n          console.warn(e.message);\n        }\n      }).catch(() => {});\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","shap","name","data","feedbackFrom","info","shapHtml","computed","mounted","explainer","TreeExplainer","fromModel","model","shapValues","X","sampleIdx","force_plot_html","expectedValue","featureNames","$refs","shapPlot","innerHTML","props","type","Object","required","Array","methods","getUserInfo","$store","dispatch","user_id","userinfo","e","console","warn","message","resetForm","formname","resetFields","handlerSubmit","feedback_info","reg","trim","length","test","$message","$confirm","confirmButtonText","cancelButtonText","then","reqinfo","account","username","JSON","stringify","res","$notify","title","catch","err"],"sources":["src/views/Index/Front/Feedback/index.vue"],"sourcesContent":["<template>\r\n    <div class=\"feedback maxWH\">\r\n        <!-- 头部 -->\r\n        <div class=\"header flex\">\r\n            <span class=\"title\">问题反馈</span>\r\n        </div>\r\n        <!-- 主体 -->\r\n        <main class=\"main\">\r\n            <div  ref=\"result\">\r\n\r\n            </div>\r\n            <!-- 介绍 -->\r\n             <div class=\"intro\">\r\n                <p class=\"flex-center\">在使用本系统中遇到了什么问题, 或者对于本系统有什么建议,</p>\r\n                <p class=\"flex-center\">又或者有什么想对开发者说的话, 等等, 都可以在这里提出来</p>\r\n                <p>{{ shapHtml }}</p>\r\n                <p v-html=\"shapHtml\"></p>\r\n                <div ref=\"shapPlot\"></div>\r\n            </div> \r\n            <!-- 表单 -->\r\n            <el-form class=\"from\" ref=\"feedbackFrom\" :model=\"feedbackFrom\" label-width=\"80px\" label-position=\"top\"\r\n                hide-required-asterisk>\r\n                <el-form-item label=\"问题反馈\" prop=\"info\">\r\n                    <el-input type=\"textarea\" v-model=\"feedbackFrom.info\" :rows=\"5\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item align=\"center\">\r\n                    <el-button type=\"primary\" @click.native.prevent.stop=\"handlerSubmit\">提交</el-button>\r\n                    <el-button @click.native.prevent.stop=\"resetForm('feedbackFrom')\">重置</el-button>\r\n                </el-form-item>\r\n            </el-form> \r\n        </main>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters } from 'vuex'\r\n//import * as shap from 'shap'\r\nimport shap from 'shap';\r\nexport default {\r\n    name: 'Feedback',\r\n    data() {\r\n       \r\n        return {\r\n            feedbackFrom: {\r\n                info: ''\r\n            },\r\n            shapHtml: ''\r\n            \r\n        }\r\n    },\r\n    computed: {\r\n        ...mapGetters(['userinfo'])\r\n    },\r\n    mounted() {\r\n    // 计算 shap 值\r\n    const explainer = shap.TreeExplainer.fromModel(this.model)\r\n    const shapValues = explainer.shapValues(this.X)\r\n\r\n    // 选择要画力图的样本\r\n    const sampleIdx = 0\r\n\r\n    // 生成 HTML 文件\r\n    const shapHtml = shap.force_plot_html(\r\n      explainer.expectedValue(1),\r\n      shapValues[sampleIdx],\r\n      this.X[sampleIdx],\r\n      this.featureNames\r\n    )\r\n\r\n    // 在组件中展示生成的 HTML 文件\r\n    this.$refs.shapPlot.innerHTML = shapHtml\r\n  },\r\n  props: {\r\n    model: { type: Object, required: true },\r\n    X: { type: Array, required: true },\r\n    featureNames: { type: Array, required: true }\r\n  },\r\n    methods: {\r\n        // 获取用户信息\r\n        async getUserInfo() {\r\n            try {\r\n                await this.$store.dispatch('getUserInfo', { user_id: this.userinfo.user_id })\r\n            } catch (e) {\r\n                console.warn(e.message)\r\n            }\r\n        },\r\n        // 重置表单\r\n        resetForm(formname) {\r\n            this.$refs[formname].resetFields()\r\n        },\r\n        // 提交\r\n        async handlerSubmit() {\r\n            const feedback_info = this.feedbackFrom.info\r\n            const reg = /^[\\s\\S]{5,100}$/\r\n            if (feedback_info.trim().length < 1) return\r\n            if (feedback_info.trim().length > 0 && !reg.test(feedback_info)) {\r\n                return this.$message({ type: 'warning', message: '请将反馈内容控制在5到100给个字符之间' })\r\n            }\r\n            // 提交\r\n            await this.$confirm('确认提交?', '提示', {\r\n                confirmButtonText: '确定',\r\n                cancelButtonText: '取消',\r\n                type: 'warning'\r\n            }).then(async () => {\r\n                try {\r\n                    const reqinfo = { account: this.userinfo.account, username: this.userinfo.username, feedback_info }\r\n                    await this.$store.dispatch('sendFeedback', JSON.stringify(reqinfo))\r\n                        .then(res => {\r\n                            this.$notify({ title: '提交成功', type: 'success', message: res })\r\n                            this.resetForm('feedbackFrom')\r\n                        })\r\n                        .catch(err => this.$message({ type: 'warning', message: err.message }))\r\n                } catch (e) {\r\n                    console.warn(e.message)\r\n                }\r\n            }).catch(() => { })\r\n        },\r\n    },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.header {\r\n    width: 100%;\r\n    height: 100px;\r\n    background-color: #324057;\r\n    box-sizing: border-box;\r\n    padding: 50px 20% 10px;\r\n    overflow: hidden;\r\n\r\n    .title {\r\n        font-size: 25px;\r\n        color: #fff;\r\n    }\r\n}\r\n\r\n.main {\r\n    width: 100%;\r\n    height: calc(100% - 100px);\r\n    box-sizing: border-box;\r\n    padding: 50px 20% 0;\r\n\r\n    .intro {\r\n        p {\r\n            font-size: 18px;\r\n        }\r\n    }\r\n\r\n    .from {\r\n        box-sizing: border-box;\r\n        padding: 50px 20% 0;\r\n    }\r\n}\r\n</style>"],"mappings":"AAmCA,SAAAA,UAAA;AACA;AACA,OAAAC,IAAA;AACA;EACAC,IAAA;EACAC,KAAA;IAEA;MACAC,YAAA;QACAC,IAAA;MACA;MACAC,QAAA;IAEA;EACA;EACAC,QAAA;IACA,GAAAP,UAAA;EACA;EACAQ,QAAA;IACA;IACA,MAAAC,SAAA,GAAAR,IAAA,CAAAS,aAAA,CAAAC,SAAA,MAAAC,KAAA;IACA,MAAAC,UAAA,GAAAJ,SAAA,CAAAI,UAAA,MAAAC,CAAA;;IAEA;IACA,MAAAC,SAAA;;IAEA;IACA,MAAAT,QAAA,GAAAL,IAAA,CAAAe,eAAA,CACAP,SAAA,CAAAQ,aAAA,KACAJ,UAAA,CAAAE,SAAA,GACA,KAAAD,CAAA,CAAAC,SAAA,GACA,KAAAG,YACA;;IAEA;IACA,KAAAC,KAAA,CAAAC,QAAA,CAAAC,SAAA,GAAAf,QAAA;EACA;EACAgB,KAAA;IACAV,KAAA;MAAAW,IAAA,EAAAC,MAAA;MAAAC,QAAA;IAAA;IACAX,CAAA;MAAAS,IAAA,EAAAG,KAAA;MAAAD,QAAA;IAAA;IACAP,YAAA;MAAAK,IAAA,EAAAG,KAAA;MAAAD,QAAA;IAAA;EACA;EACAE,OAAA;IACA;IACA,MAAAC,YAAA;MACA;QACA,WAAAC,MAAA,CAAAC,QAAA;UAAAC,OAAA,OAAAC,QAAA,CAAAD;QAAA;MACA,SAAAE,CAAA;QACAC,OAAA,CAAAC,IAAA,CAAAF,CAAA,CAAAG,OAAA;MACA;IACA;IACA;IACAC,UAAAC,QAAA;MACA,KAAAnB,KAAA,CAAAmB,QAAA,EAAAC,WAAA;IACA;IACA;IACA,MAAAC,cAAA;MACA,MAAAC,aAAA,QAAArC,YAAA,CAAAC,IAAA;MACA,MAAAqC,GAAA;MACA,IAAAD,aAAA,CAAAE,IAAA,GAAAC,MAAA;MACA,IAAAH,aAAA,CAAAE,IAAA,GAAAC,MAAA,SAAAF,GAAA,CAAAG,IAAA,CAAAJ,aAAA;QACA,YAAAK,QAAA;UAAAvB,IAAA;UAAAa,OAAA;QAAA;MACA;MACA;MACA,WAAAW,QAAA;QACAC,iBAAA;QACAC,gBAAA;QACA1B,IAAA;MACA,GAAA2B,IAAA;QACA;UACA,MAAAC,OAAA;YAAAC,OAAA,OAAApB,QAAA,CAAAoB,OAAA;YAAAC,QAAA,OAAArB,QAAA,CAAAqB,QAAA;YAAAZ;UAAA;UACA,WAAAZ,MAAA,CAAAC,QAAA,iBAAAwB,IAAA,CAAAC,SAAA,CAAAJ,OAAA,GACAD,IAAA,CAAAM,GAAA;YACA,KAAAC,OAAA;cAAAC,KAAA;cAAAnC,IAAA;cAAAa,OAAA,EAAAoB;YAAA;YACA,KAAAnB,SAAA;UACA,GACAsB,KAAA,CAAAC,GAAA,SAAAd,QAAA;YAAAvB,IAAA;YAAAa,OAAA,EAAAwB,GAAA,CAAAxB;UAAA;QACA,SAAAH,CAAA;UACAC,OAAA,CAAAC,IAAA,CAAAF,CAAA,CAAAG,OAAA;QACA;MACA,GAAAuB,KAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}